<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SharpSploit</name>
    </assembly>
    <members>
        <member name="T:SharpSploit.Credentials.Mimikatz">
            <summary>
            (SharpSploit.Credentials.)Mimikatz is a library for executing Mimikatz functions. SharpSploit's implementation
            uses a PE Loader to execute Mimikatz functions. This is a wrapper class that loads the PE and executes user-
            specified Mimikatz functions
            </summary>
            <remarks>
            Mimikatz is a tool for playing with credentials in Windows, written by Benjamin Delpy (@gentilkiwi). (Found
            at https://github.com/gentilkiwi/mimikatz).
            This wrapper class is adapted from Chris Ross (@xorrior)'s implementation, converted by (@TheRealWover) to use the Manual Mapping API.
            </remarks>
        </member>
        <member name="M:SharpSploit.Credentials.Mimikatz.Command(System.String,System.String)">
            <summary>
            Loads the Mimikatz PE and executes a chosen Mimikatz command.
            </summary>
            <param name="Command">Mimikatz command to be executed.</param>
            <param name="DecoyModulePath">Optionally specify a module to overload Mimikatz into. By default, a random DLL in WINDIR\System32 will be selected.</param>
            <returns>Mimikatz output.</returns>
        </member>
        <member name="M:SharpSploit.Credentials.Mimikatz.Coffee">
            <summary>
            Loads the Mimikatz PE and executes the Mimikatz command to get some coffee.
            Equates to `Command("coffee")`.
            </summary>
            <returns>Mimikatz output.</returns>
        </member>
        <member name="M:SharpSploit.Credentials.Mimikatz.LogonPasswords">
            <summary>
            Loads the Mimikatz PE and executes the Mimikatz command to retrieve plaintext
            passwords from LSASS. Equates to `Command("privilege::debug sekurlsa::logonPasswords")`. (Requires Admin)
            </summary>
            <returns>Mimikatz output.</returns>
        </member>
        <member name="M:SharpSploit.Credentials.Mimikatz.SamDump">
            <summary>
            Loads the Mimikatz PE and executes the Mimikatz command to retrieve password hashes
            from the SAM database. Equates to `Command("privilege::debug lsadump::sam")`. (Requires Admin)
            </summary>
            <returns>Mimikatz output.</returns>
        </member>
        <member name="M:SharpSploit.Credentials.Mimikatz.LsaSecrets">
            <summary>
            Loads the Mimikatz PE and executes the Mimikatz command to retrieve LSA secrets
            stored in registry. Equates to `Command("privilege::debug lsadump::secrets")`. (Requires Admin)
            </summary>
            <returns>Mimikatz output.</returns>
        </member>
        <member name="M:SharpSploit.Credentials.Mimikatz.LsaCache">
            <summary>
            Loads the Mimikatz PE and executes the Mimikatz command to retrieve Domain
            Cached Credentials hashes from registry. Equates to `Command("privilege::debug lsadump::cache")`.
            (Requires Admin)
            </summary>
            <returns>Mimikatz output.</returns>
        </member>
        <member name="M:SharpSploit.Credentials.Mimikatz.Wdigest">
            <summary>
            Loads the Mimikatz PE and executes the Mimikatz command to retrieve Wdigest
            credentials from registry. Equates to `Command("sekurlsa::wdigest")`.
            </summary>
            <returns>Mimikatz output.</returns>
        </member>
        <member name="M:SharpSploit.Credentials.Mimikatz.All">
            <summary>
            Loads the Mimikatz PE and executes each of the builtin local commands (not DCSync). (Requires Admin)
            </summary>
            <returns>Mimikatz output.</returns>
        </member>
        <member name="M:SharpSploit.Credentials.Mimikatz.DCSync(System.String,System.String,System.String)">
            <summary>
            Loads the Mimikatz PE and executes the "dcsync" module to retrieve the NTLM hash of a specified (or all) Domain user. (Requires Domain Admin)
            </summary>
            <param name="user">Username to retrieve NTLM hash for. "All" for all domain users.</param>
            <param name="FQDN">Optionally specify an alternative fully qualified domain name. Default is current domain.</param>
            <param name="DC">Optionally specify a specific Domain Controller to target for the dcsync.</param>
            <returns>The NTLM hash of the target user(s).</returns>
        </member>
        <member name="M:SharpSploit.Credentials.Mimikatz.PassTheHash(System.String,System.String,System.String,System.String)">
            <summary>
            Loads the Mimikatz PE and executes the "pth" module to start a new process
            as a user using an NTLM password hash for authentication.
            </summary>
            <param name="user">Username to authenticate as.</param>
            <param name="NTLM">NTLM hash to authenticate the user.</param>
            <param name="FQDN">Optionally specify an alternative fully qualified domain name. Default is current domain.</param>
            <param name="run">The command to execute as the specified user.</param>
            <returns></returns>
        </member>
        <member name="T:SharpSploit.Credentials.Tokens">
            <summary>
            Tokens is a library for token manipulation that can be used to impersonate other users, run commands as other user,
            and/or to bypass UAC using token duplication.
            </summary>
            <remarks>
            Tokens is adapted from and borrows heavily from Alexander Leary's (@0xbadjuju) Tokenvator (Found
            at https://github.com/0xbadjuju/Tokenvator).
            </remarks>
        </member>
        <member name="M:SharpSploit.Credentials.Tokens.#ctor(System.Boolean)">
            <summary>
            Creates the Tokens class, attempts to obtain the current process' token, and obtain the SeDebugPrivilege.
            </summary>
        </member>
        <member name="M:SharpSploit.Credentials.Tokens.Dispose">
            <summary>
            Attempts to close all open handles.
            </summary>
        </member>
        <member name="M:SharpSploit.Credentials.Tokens.WhoAmI">
            <summary>
            Gets the username of the currently used/impersonated token.
            </summary>
            <returns>Current username.</returns>
        </member>
        <member name="M:SharpSploit.Credentials.Tokens.ImpersonateUser(System.String)">
            <summary>
            Find a process owned by the specificied user and impersonate the token. Used to execute subsequent commands
            as the specified user. (Requires Admin)
            </summary>
            <param name="Username">User to impersonate. "DOMAIN\Username" format expected.</param>
            <returns>True if impersonation succeeds, false otherwise.</returns>
        </member>
        <member name="M:SharpSploit.Credentials.Tokens.ImpersonateProcess(System.UInt32)">
            <summary>
            Impersonate the token of the specified process. Used to execute subsequent commands as the user associated
            with the token of the specified process. (Requires Admin)
            </summary>
            <param name="ProcessID">Process ID of the process to impersonate.</param>
            <returns>True if impersonation succeeds, false otherwise.</returns>
        </member>
        <member name="M:SharpSploit.Credentials.Tokens.GetSystem">
            <summary>
            Impersonate the SYSTEM user. Equates to `ImpersonateUser("NT AUTHORITY\SYSTEM")`. (Requires Admin)
            </summary>
            <returns>True if impersonation succeeds, false otherwise.</returns>
        </member>
        <member name="M:SharpSploit.Credentials.Tokens.BypassUAC(System.String,System.String,System.String,System.Int32)">
            <summary>
            Bypasses UAC through token duplication and spawns a specified process. (Requires Admin)
            </summary>
            <param name="Binary">The binary to execute with high integrity.</param>
            <param name="Arguments">Arguments to pass to the binary.</param>
            <param name="Path">Path that the binary resides in.</param>
            <param name="ProcessId">Specify the process for which to perform token duplication. By deafult (0), all
            appropriate processes will be tried.</param>
            <returns>True if UAC bypass succeeeds, false otherwise.</returns>
            <remarks>
            Credit for the UAC bypass token duplication technique goes to James Forshaw (@tiraniddo).
            Credit for the PowerShell implementation of this bypass goes to Matt Nelson (@enigma0x3).
            </remarks>
        </member>
        <member name="M:SharpSploit.Credentials.Tokens.RunAs``1(System.String,System.String,System.String,System.Func{``0},SharpSploit.Execution.Win32.Advapi32.LOGON_TYPE)">
            <summary>
            Makes a new token to run a specified function as a specified user with a specified password. Automatically calls
            `RevertToSelf()` after executing the function.
            </summary>
            <typeparam name="T">Type of object to be return by the Action function.</typeparam>
            <param name="Username">Username to execute Action as.</param>
            <param name="Domain">Domain to authenticate the user to.</param>
            <param name="Password">Password to authenticate the user.</param>
            <param name="Action">Action to perform as the user</param>
            <param name="LogonType">LogonType to use. Defaults to LOGON32_LOGON_INTERACTIVE, which is suitable for local
            actions. LOGON32_LOGON_NEW_CREDENTIALS is suitable to perform actions which require remote authentication.</param>
            <returns>Object returned by the Action function.</returns>
            <remarks>
            Credit to https://github.com/mj1856/SimpleImpersonation for the awesome Func(T) idea.
            </remarks>
        </member>
        <member name="M:SharpSploit.Credentials.Tokens.MakeToken(System.String,System.String,System.String,SharpSploit.Execution.Win32.Advapi32.LOGON_TYPE)">
            <summary>
            Makes a new token with a specified username and password, and impersonates it to conduct future actions as
            the specified user.
            </summary>
            <param name="Username">Username to authenticate as.</param>
            <param name="Domain">Domain to authenticate the user to.</param>
            <param name="Password">Password to authenticate the user.</param>
            <param name="LogonType">LogonType to use. Defaults to LOGON32_LOGON_NEW_CREDENTIALS, which is suitable to
            perform actions which require remote authentication. LOGON32_LOGON_INTERACTIVE is suitable for local actions</param>
            <returns>True if impersonation succeeds, false otherwise.</returns>
            <remarks>
            Credit to @rsmudge for the technique detailed here: https://blog.cobaltstrike.com/2015/12/16/windows-access-tokens-and-alternate-credentials
            </remarks>
        </member>
        <member name="M:SharpSploit.Credentials.Tokens.RevertToSelf">
            <summary>
            Ends the impersonation of any token, reverting back to the initial token associated with the current process.
            Useful in conjuction with functions that impersonate a token and do not automatically RevertToSelf, such
            as: `ImpersonateUser()`, `ImpersonateProcess()`, `GetSystem()`, and `MakeToken()`.
            </summary>
            <returns>True if RevertToSelf succeeds, false otherwise.</returns>
        </member>
        <member name="M:SharpSploit.Credentials.Tokens.EnableTokenPrivilege(System.IntPtr@,System.String)">
            <summary>
            Enables a specified security privilege for a specified token. 
            </summary>
            <param name="hToken">Token to enable a security privilege for.</param>
            <param name="Privilege">Privilege to enable.</param>
            <returns>True if enabling Token succeeds, false otherwise.</returns>
        </member>
        <member name="T:SharpSploit.Enumeration.Domain">
            <summary>
            Domain is a library for domain enumeration that can be used to search for and query for information from
            DomainObjects such as users, groups, and computers.
            </summary>
            <remarks>
            Domain is adapted from Will Schroeder's (@harmj0y) PowerView (Found
            at https://github.com/PowerShellMafia/PowerSploit/blob/dev/Recon/PowerView.ps1)
            </remarks>
        </member>
        <member name="T:SharpSploit.Enumeration.Domain.DomainSearcher">
            <summary>
            DomainSearcher is a LDAP searcher class for domain enumeration.
            </summary>
            <remarks>
            DomainSearcher is adapted from Will Schroeder's (@harmj0y) PowerView. (Found
            at https://github.com/PowerShellMafia/PowerSploit/blob/dev/Recon/PowerView.ps1)
            </remarks>
        </member>
        <member name="M:SharpSploit.Enumeration.Domain.DomainSearcher.#ctor(SharpSploit.Enumeration.Domain.Credential,System.String,System.String,System.String,System.String,System.DirectoryServices.SearchScope,System.Int32,System.TimeSpan,System.Boolean,System.DirectoryServices.SecurityMasks)">
            <summary>
            Constructor for the DomainSearcher class.
            </summary>
            <param name="Credentials">Optional alternative Credentials to authenticate to the Domain.</param>
            <param name="Domain">Optional alternative Domain to authenticate to and search.</param>
            <param name="Server">Optional alternative Server within the Domain to authenticate to and search.</param>
            <param name="SearchBase">Optional SearchBase to prepend to all LDAP searches.</param>
            <param name="SearchString">Optional SearchString to append to SearchBase for all LDAP searches.</param>
            <param name="SearchScope">Optional SearchScope for the underlying DirectorySearcher object.</param>
            <param name="ResultPageSize">Optional ResultPageSize for the underlying DirectorySearcher object.</param>
            <param name="ServerTimeLimit">Optional max time limit for the server per search.</param>
            <param name="TombStone">Optionally retrieve deleted/tombstoned DomainObjects</param>
            <param name="SecurityMasks">Optional SecurityMasks for the underlying DirectorySearcher object.</param>
        </member>
        <member name="M:SharpSploit.Enumeration.Domain.DomainSearcher.GetDomainUser(System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{SharpSploit.Enumeration.Domain.UACEnum},System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Gets a specified user `DomainObject` in the current Domain.
            </summary>
            <param name="Identity">Username to search for.</param>
            <param name="LDAPFilter">Optional LDAP filter to apply to the search.</param>
            <param name="Properties">Optional list of properties to retrieve from the DomainObject.
            If not specified, all properties are included.</param>
            <param name="UACFilter">Optional filter to parse the userAccountControl DomainObject property.</param>
            <param name="SPN">Optionally filter for only a DomainObject with an SPN set.</param>
            <param name="AllowDelegation">Optionally filter for only a DomainObject that allows for delegation.</param>
            <param name="DisallowDelegation">Optionally filter for only a DomainObject that does not allow for delegation.</param>
            <param name="AdminCount">Optionally filter for only a DomainObject with the AdminCount property set.</param>
            <param name="TrustedToAuth">Optionally filter for only a DomainObject that is trusted to authenticate for other DomainObjects</param>
            <param name="PreauthNotRequired">Optionally filter for only a DomainObject does not require Kerberos preauthentication.</param>
            <returns>Matching user DomainObject</returns>
        </member>
        <member name="M:SharpSploit.Enumeration.Domain.DomainSearcher.GetDomainUsers(System.Collections.Generic.IEnumerable{System.String},System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{SharpSploit.Enumeration.Domain.UACEnum},System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Gets a list of specified (or all) user `DomainObject`s in the current Domain.
            </summary>
            <param name="Identities">Optional list of usernames to search for.</param>
            <param name="LDAPFilter">Optional LDAP filter to apply to the search.</param>
            <param name="Properties">Optional list of properties to retrieve from the DomainObject.
            If not specified, all properties are included.</param>
            <param name="UACFilter">Optional filter to parse the userAccountControl DomainObject property.</param>
            <param name="SPN">Optionally filter for only a DomainObject with an SPN set.</param>
            <param name="AllowDelegation">Optionally filter for only a DomainObject that allows for delegation.</param>
            <param name="DisallowDelegation">Optionally filter for only a DomainObject that does not allow for delegation.</param>
            <param name="AdminCount">Optionally filter for only a DomainObject with the AdminCount property set.</param>
            <param name="TrustedToAuth">Optionally filter for only a DomainObject that is trusted to authenticate for other DomainObjects</param>
            <param name="PreauthNotRequired">Optionally filter for only a DomainObject does not require Kerberos preauthentication.</param>
            <param name="FindOne">Optionally find only the first matching DomainObject.</param>
            <returns>List of matching user DomainObjects</returns>
        </member>
        <member name="M:SharpSploit.Enumeration.Domain.DomainSearcher.GetDomainGroup(System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.String,System.String)">
            <summary>
            Gets a specified group `DomainObject` in the current Domain.
            </summary>
            <param name="Identity">Group name to search for.</param>
            <param name="LDAPFilter">Optional LDAP filter to apply to the search.</param>
            <param name="Properties">Optional list of properties to retrieve from the DomainObject.
            If not specified, all properties are included.</param>
            <param name="AdminCount">Optionally filter for only a DomainObject with the AdminCount property set.</param>
            <param name="GroupScope">Optionally filter for a GroupScope (DomainLocal, Global, Universal, etc).</param>
            <param name="GroupProperty">Optionally filter for a GroupProperty (Security, Distribution, CreatedBySystem,
            NotCreatedBySystem,etc)</param>
            <returns>Matching group DomainObject</returns>
        </member>
        <member name="M:SharpSploit.Enumeration.Domain.DomainSearcher.GetDomainGroups(System.Collections.Generic.IEnumerable{System.String},System.String,System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.String,System.String,System.Boolean)">
            <summary>
            Gets a list of specified (or all) group `DomainObject`s in the current Domain.
            </summary>
            <param name="Identities">Optional list of group names to search for.</param>
            <param name="LDAPFilter">Optional LDAP filter to apply to the search.</param>
            <param name="Properties">Optional list of properties to retrieve from the DomainObject.
            If not specified, all properties are included.</param>
            <param name="AdminCount">Optionally filter for only a DomainObject with the AdminCount property set.</param>
            <param name="GroupScope">Optionally filter for a GroupScope (DomainLocal, Global, Universal, etc).</param>
            <param name="GroupProperty">Optionally filter for a GroupProperty (Security, Distribution, CreatedBySystem,
            NotCreatedBySystem,etc).</param>
            <param name="FindOne">Optionally find only the first matching DomainObject.</param>
            <returns>List of matching group DomainObjects</returns>
        </member>
        <member name="M:SharpSploit.Enumeration.Domain.DomainSearcher.GetDomainComputer(System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{SharpSploit.Enumeration.Domain.UACEnum},System.Boolean,System.Boolean,System.Boolean,System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Gets a specified computer `DomainObject` in the current Domain.
            </summary>
            <param name="Identity">ComputerName to search for</param>
            <param name="LDAPFilter">Optional LDAP filter to apply to the search.</param>
            <param name="Properties">Optional list of properties to retrieve from the DomainObject.
            If not specified, all properties are included.</param>
            <param name="UACFilter">Optional filter to parse the userAccountControl DomainObject property.</param>
            <param name="Unconstrained">Optionally filter for only a DomainObject that has unconstrained delegation.</param>
            <param name="TrustedToAuth">Optionally filter for only a DomainObject that is trusted to authenticate for other DomainObjects</param>
            <param name="Printers">Optionally return only a DomainObject that is a printer.</param>
            <param name="SPN">Optionally filter for only a DomainObject with an SPN set.</param>
            <param name="OperatingSystem">Optionally filter for only a DomainObject with a specific Operating System, wildcards accepted.</param>
            <param name="ServicePack">Optionally filter for only a DomainObject with a specific service pack, wildcards accepted.</param>
            <param name="SiteName">Optionally filter for only a DomainObject in a specific Domain SiteName, wildcards accepted.</param>
            <param name="Ping">Optional switch, ping the computer to ensure it's up before enumerating.</param>
            <returns>Matching computer DomainObject</returns>
        </member>
        <member name="M:SharpSploit.Enumeration.Domain.DomainSearcher.GetDomainComputers(System.Collections.Generic.IEnumerable{System.String},System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{SharpSploit.Enumeration.Domain.UACEnum},System.Boolean,System.Boolean,System.Boolean,System.String,System.String,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
             Gets a list of specified (or all) computer `DomainObject`s in the current Domain.
            </summary>
            <param name="Identities">Optional list of ComputerNames to search for.</param>
            <param name="LDAPFilter">Optional LDAP filter to apply to the search.</param>
            <param name="Properties">Optional list of properties to retrieve from the DomainObject.
            If not specified, all properties are included.</param>
            <param name="UACFilter">Optional filter to parse the userAccountControl DomainObject property.</param>
            <param name="Unconstrained">Optionally filter for only a DomainObject that has unconstrained delegation.</param>
            <param name="TrustedToAuth">Optionally filter for only a DomainObject that is trusted to authenticate for other DomainObjects</param>
            <param name="Printers">Optionally return only a DomainObject that is a printer.</param>
            <param name="SPN">Optionally filter for only a DomainObject with an SPN set.</param>
            <param name="OperatingSystem">Optionally filter for only a DomainObject with a specific Operating System, wildcards accepted.</param>
            <param name="ServicePack">Optionally filter for only a DomainObject with a specific service pack, wildcards accepted.</param>
            <param name="SiteName">Optionally filter for only a DomainObject in a specific Domain SiteName, wildcards accepted.</param>
            <param name="Ping">Optional switch, ping the computer to ensure it's up before enumerating.</param>
            <param name="FindOne">Optionally find only the first matching DomainObject.</param>
            <returns>List of matching computer DomainObjects</returns>
        </member>
        <member name="M:SharpSploit.Enumeration.Domain.DomainSearcher.GetDomainSPNTickets(System.Collections.Generic.IEnumerable{SharpSploit.Enumeration.Domain.DomainObject})">
            <summary>
            Gets `SPNTicket`s for specified `DomainObject`s.
            </summary>
            <param name="DomainObjects">List of DomainObjects with an SPN set.</param>
            <returns>List of SPNTickets for the specified DomainObjects</returns>
        </member>
        <member name="M:SharpSploit.Enumeration.Domain.DomainSearcher.GetDomainSPNTicket(SharpSploit.Enumeration.Domain.DomainObject)">
            <summary>
            Get `SPNTicket` for specified `DomainObject`.
            </summary>
            <param name="DomainObject">DomainObject with an SPN set.</param>
            <returns>SPNTicker for the specified DomainObject</returns>
        </member>
        <member name="M:SharpSploit.Enumeration.Domain.DomainSearcher.Kerberoast(System.Collections.Generic.IEnumerable{System.String},System.String,System.Collections.Generic.IEnumerable{SharpSploit.Enumeration.Domain.UACEnum},System.Boolean)">
            <summary>
            Gets a list of `SPNTicket`s for specified (or all) users with a SPN set in the current Domain.
            </summary>
            <param name="Identities">Username to Kerberoast of a user with an SPN set.</param>
            <param name="LDAPFilter">Optional LDAP filter when searching for users with an SPN set.</param>
            <param name="UACFilter">Optional filter to parse the userAccountControl DomainObject property.</param>
            <param name="FindOne">If true, will only find a single SPNTicket for the first user found with an SPN set.</param>
            <returns>List of SPNTickets</returns>
        </member>
        <member name="M:SharpSploit.Enumeration.Domain.DomainSearcher.Kerberoast(System.String,System.String,System.Collections.Generic.IEnumerable{SharpSploit.Enumeration.Domain.UACEnum})">
            <summary>
            Gets a list of `SPNTicket`s for specified (or all) users with a SPN set in the current Domain.
            </summary>
            <param name="Identity">Optional list of users to Kerberoast. If null, all users with an SPN set will be used.</param>
            <param name="LDAPFilter">Optional LDAP filter when searching for users with an SPN set.</param>
            <param name="UACFilter">Optional filter to parse the userAccountControl DomainObject property.</param>
            <returns>List of SPNTickets</returns>
        </member>
        <member name="T:SharpSploit.Enumeration.Domain.Credential">
            <summary>
            Credential to authenticate to the Domain with a DomainSearcher object.
            </summary>
        </member>
        <member name="T:SharpSploit.Enumeration.Domain.DomainObject">
            <summary>
            Generic DomainObject class for LDAP entries in Active Directory.
            </summary>
        </member>
        <member name="T:SharpSploit.Enumeration.Domain.SPNTicket">
            <summary>
            SPNTicket for a DomainObject with a SPN set. Useful for obtaining krb5tgs hashes.
            </summary>
        </member>
        <member name="M:SharpSploit.Enumeration.Domain.SPNTicket.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Constructor for SPNTicket.
            </summary>
            <param name="servicePrincipalName">Service Principal Name (SPN) for which the ticket applies.</param>
            <param name="samAccountName">SamAccountName for the user that has a SPN set.</param>
            <param name="userDomain">Domain name for the user that has a SPN set.</param>
            <param name="ticketHexStream">TicketHexStream of the SPNTicket.</param>
        </member>
        <member name="M:SharpSploit.Enumeration.Domain.SPNTicket.GetFormattedHash(SharpSploit.Enumeration.Domain.SPNTicket.HashFormat)">
            <summary>
            Gets a krb5tgs hash formatted for a cracker.
            </summary>
            <param name="format">Format for the hash.</param>
            <returns>Formatted krb5tgs hash.</returns>
        </member>
        <member name="T:SharpSploit.Enumeration.Net">
            <summary>
            Net is a library for localgroup/domain enumeration that can be used to search for users, groups, loggedonusers,
            and sessions on remote systems using Win32 API functions.
            </summary>
            <remarks>
            Net is adapted from Will Schroeder's (@harmj0y) PowerView. (Found
            at https://github.com/PowerShellMafia/PowerSploit/blob/dev/Recon/PowerView.ps1)
            </remarks>
        </member>
        <member name="T:SharpSploit.Enumeration.Net.LocalGroup">
            <summary>
            LocalGroup represents a local group object on a remote system.
            </summary>
        </member>
        <member name="T:SharpSploit.Enumeration.Net.LocalGroupMember">
            <summary>
            LocalGroupMember represents a user's membership to a local group on a remote system.
            </summary>
        </member>
        <member name="T:SharpSploit.Enumeration.Net.LoggedOnUser">
            <summary>
            LoggedOnUser represents a user logged on to a remote system.
            </summary>
        </member>
        <member name="T:SharpSploit.Enumeration.Net.SessionInfo">
            <summary>
            SessionInfo represents a user with a session on a remote system.
            </summary>
        </member>
        <member name="T:SharpSploit.Enumeration.Net.ShareInfo">
            <summary>
            ShareInfo represents a share on a remote system.
            </summary>
        </member>
        <member name="M:SharpSploit.Enumeration.Net.GetNetLocalGroups(SharpSploit.Enumeration.Domain.DomainObject,SharpSploit.Enumeration.Domain.Credential)">
            <summary>
            Gets a list of `LocalGroup`s from a specified DomainCompter.
            </summary>
            <param name="DomainComputer">DomainComputer to query for LocalGroups.</param>
            <param name="Credential">Credential to use for authentication to the DomainComputer.</param>
            <returns>List of LocalGroups.</returns>
        </member>
        <member name="M:SharpSploit.Enumeration.Net.GetNetLocalGroups(System.Collections.Generic.IEnumerable{SharpSploit.Enumeration.Domain.DomainObject},SharpSploit.Enumeration.Domain.Credential)">
            <summary>
            Gets a list of `LocalGroup`s from specified DomainComputers.
            </summary>
            <param name="DomainComputers">List of DomainComputers to query for LocalGroups.</param>
            <param name="Credential">Credential to use for authentication to the DomainComputer.</param>
            <returns>List of LocalGroups.</returns>
        </member>
        <member name="M:SharpSploit.Enumeration.Net.GetNetLocalGroups(System.String,SharpSploit.Enumeration.Domain.Credential)">
            <summary>
            Gets a list of `LocalGroup`s from specified remote computer(s).
            </summary>
            <param name="ComputerName">ComputerName to query for LocalGroups.</param>
            <param name="Credential">Credential to use for authentication to the ComputerName.</param>
            <returns>List of LocalGroups.</returns>
        </member>
        <member name="M:SharpSploit.Enumeration.Net.GetNetLocalGroups(System.Collections.Generic.IEnumerable{System.String},SharpSploit.Enumeration.Domain.Credential)">
            <summary>
            Gets a list of `LocalGroup`s from specified remote computer(s).
            </summary>
            <param name="ComputerNames">List of ComputerNames to query for LocalGroups.</param>
            <param name="Credential">Credential to use for authentication to the ComputerNames.</param>
            <returns>List of LocalGroups.</returns>
        </member>
        <member name="M:SharpSploit.Enumeration.Net.GetNetLocalGroupMembers(SharpSploit.Enumeration.Domain.DomainObject,System.String,SharpSploit.Enumeration.Domain.Credential)">
            <summary>
            Gets a list of `LocalGroupMember`s from a specified DomainComputer for a specified group.
            </summary>
            <param name="DomainComputer">DomainComputer to query for LocalGroupMembers.</param>
            <param name="GroupName">Group to search for LocalGroupMembers. Administrators, by default.</param>
            <param name="Credential">Credential to authenticate to the DomainComputer.</param>
            <returns>List of LocalGroupMembers</returns>
        </member>
        <member name="M:SharpSploit.Enumeration.Net.GetNetLocalGroupMembers(System.Collections.Generic.IEnumerable{SharpSploit.Enumeration.Domain.DomainObject},System.String,SharpSploit.Enumeration.Domain.Credential)">
            <summary>
            Gets a list of `LocalGroupMember`s from specified DomainComputers for a specified group.
            </summary>
            <param name="DomainComputers">DomainComputers to query for LocalGroupMembers.</param>
            <param name="GroupName">Group to search for LocalGroupMembers. Administrators, by default.</param>
            <param name="Credential">Credential to authenticate to the DomainComputer.</param>
            <returns>List of LocalGroupMembers.</returns>
        </member>
        <member name="M:SharpSploit.Enumeration.Net.GetNetLocalGroupMembers(System.String,System.String,SharpSploit.Enumeration.Domain.Credential)">
            <summary>
            Gets a list of `LocalGroupMember`s from a specified ComputerName for a specified group.
            </summary>
            <param name="ComputerName">ComputerName to query for LocalGroupMembers.</param>
            <param name="GroupName">Group to search for LocalGroupMembers. Administrators, by default.</param>
            <param name="Credential">Credential to authenticate to the ComputerName.</param>
            <returns>List of LocalGroupMembers.</returns>
        </member>
        <member name="M:SharpSploit.Enumeration.Net.GetNetLocalGroupMembers(System.Collections.Generic.IEnumerable{System.String},System.String,SharpSploit.Enumeration.Domain.Credential)">
            <summary>
            Gets a list of `LocalGroupMember`s from specified ComputerNames for a specified group.
            </summary>
            <param name="ComputerNames">List of ComputerNames to query for LocalGroupMembers.</param>
            <param name="GroupName">Group to search for LocalGroupMembers. Administrators, by default.</param>
            <param name="Credential">Credential to authenticate to the ComputerNames.</param>
            <returns>List of LocalGroupMembers</returns>
        </member>
        <member name="M:SharpSploit.Enumeration.Net.GetNetLoggedOnUsers(SharpSploit.Enumeration.Domain.DomainObject,SharpSploit.Enumeration.Domain.Credential)">
            <summary>
            Gets a list of `LoggedOnUser`s from a DomainComputer.
            </summary>
            <param name="DomainComputer">DomainComputer to query for LoggedOnUsers</param>
            <param name="Credential">Credentials to authenticate to the DomainComputer.</param>
            <returns>List of LoggedOnUsers.</returns>
        </member>
        <member name="M:SharpSploit.Enumeration.Net.GetNetLoggedOnUsers(System.Collections.Generic.IEnumerable{SharpSploit.Enumeration.Domain.DomainObject},SharpSploit.Enumeration.Domain.Credential)">
            <summary>
            Gets a list of `LoggedOnUser`s from a list of DomainComputers.
            </summary>
            <param name="DomainComputers">DomainComputers to query for LoggedOnUsers.</param>
            <param name="Credential">Credentials to authenticate to the DomainComputers.</param>
            <returns>List of LoggedOnUsers.</returns>
        </member>
        <member name="M:SharpSploit.Enumeration.Net.GetNetLoggedOnUsers(System.String,SharpSploit.Enumeration.Domain.Credential)">
            <summary>
            Gets a list of `LoggedOnUser`s from a ComputerName.
            </summary>
            <param name="ComputerName">ComputerName to query for LoggedOnUsers.</param>
            <param name="Credential">Credentials to authenticate to the ComputerName.</param>
            <returns>List of LoggedOnUsers.</returns>
        </member>
        <member name="M:SharpSploit.Enumeration.Net.GetNetLoggedOnUsers(System.Collections.Generic.IEnumerable{System.String},SharpSploit.Enumeration.Domain.Credential)">
            <summary>
            Gets a list of `LoggedOnUser`s from a list of ComputerNames.
            </summary>
            <param name="ComputerNames">ComputerNames to query for LoggedOnUsers.</param>
            <param name="Credential">Credentials to authenticate to the ComputerNames.</param>
            <returns>List of LoggedOnUsers.</returns>
        </member>
        <member name="M:SharpSploit.Enumeration.Net.GetNetSessions(SharpSploit.Enumeration.Domain.DomainObject,SharpSploit.Enumeration.Domain.Credential)">
            <summary>
            Gets a list of `SessionInfo`s from a DomainComputer.
            </summary>
            <param name="DomainComputer">DomainComputer to query for SessionInfos.</param>
            <param name="Credential">Credentials to authenticate to the DomainComputer.</param>
            <returns>List of SessionInfos.</returns>
        </member>
        <member name="M:SharpSploit.Enumeration.Net.GetNetSessions(System.Collections.Generic.IEnumerable{SharpSploit.Enumeration.Domain.DomainObject},SharpSploit.Enumeration.Domain.Credential)">
            <summary>
            Gets a list of `SessionInfo`s from a list of DomainComputers.
            </summary>
            <param name="DomainComputers">DomainComputers to query for SessionInfos.</param>
            <param name="Credential">Credentials to authenticate to the DomainComputers.</param>
            <returns>List of SessionInfos.</returns>
        </member>
        <member name="M:SharpSploit.Enumeration.Net.GetNetSessions(System.String,SharpSploit.Enumeration.Domain.Credential)">
            <summary>
            Gets a list of `SessionInfo`s from a ComputerName.
            </summary>
            <param name="ComputerName">ComputerName to query for SessionInfos.</param>
            <param name="Credential">Credentials to authenticate to the ComputerName.</param>
            <returns>List of SessionInfos.</returns>
        </member>
        <member name="M:SharpSploit.Enumeration.Net.GetNetSessions(System.Collections.Generic.IEnumerable{System.String},SharpSploit.Enumeration.Domain.Credential)">
            <summary>
            Gets a list of `SessionInfo`s from a list of ComputerNames.
            </summary>
            <param name="ComputerNames">ComputerNames to query for SessionInfos.</param>
            <param name="Credential">Credentials to authenticate to the ComputerNames.</param>
            <returns>List of SessionInfos.</returns>
        </member>
        <member name="M:SharpSploit.Enumeration.Net.GetNetShares(SharpSploit.Enumeration.Domain.DomainObject)">
            <summary>
            Gets a list of Shares from a DomainComputer.
            </summary>
            <param name="DomainComputer">DomainComputer to query for ShareInfo.</param>
            <returns>List of ShareInfo objects containing the list of shares.</returns>
            <author>Scottie Austin (@checkymander)</author>
        </member>
        <member name="M:SharpSploit.Enumeration.Net.GetNetShares(System.Collections.Generic.IEnumerable{SharpSploit.Enumeration.Domain.DomainObject})">
            <summary>
            Gets a list of Shares from a list of DomainComputers.
            </summary>
            <param name="DomainComputers">DomainComputers to query for ShareInfo.</param>
            <returns>List of ShareInfo objects containing the list of shares.</returns>
            <author>Scottie Austin (@checkymander)</author>
        </member>
        <member name="M:SharpSploit.Enumeration.Net.GetNetShares(System.String)">
            <summary>
            Enumerates shared folders on a host using the Windows NetShareEnum API Call
            </summary>
            <param name="ComputerName">The target computer.</param>
            <returns>List of ShareInfo objects containing the list of shares.</returns>
            <author>Scottie Austin (@checkymander)</author>
        </member>
        <member name="M:SharpSploit.Enumeration.Net.GetNetShares(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Enumerates shared folders on a group of hosts using the Windows NetShareEnum API Call
            </summary>
            <param name="ComputerNames">The target computer.</param>
            <returns>List of ShareInfo objects containing the list of shares.</returns>
            <author>Scottie Austin (@checkymander)</author>
        </member>
        <member name="T:SharpSploit.Enumeration.GPO">
            <summary>
            GPO is a library for GPO enumeration.
            </summary>
        </member>
        <member name="M:SharpSploit.Enumeration.GPO.GetEnableLua(System.String)">
            <summary>
            Gets the value of EnableLUA from a GptTmpl.inf file.
            </summary>
            <author>Dennis Panagiotopoulos (@den_n1s)</author>
            <param name="GptTmplPath">Path to the GptTmpl.inf file.</param>
            <returns>True if EnableLUA is enabled, false otherwise.</returns>
        </member>
        <member name="M:SharpSploit.Enumeration.GPO.GetFilterAdministratorToken(System.String)">
            <summary>
            Gets the value of FilterAdministratorToken from a GptTmpl.inf file.
            </summary>
            <author>Dennis Panagiotopoulos (@den_n1s)</author>
            <param name="GptTmplPath">Path to the GptTmpl.inf file.</param>
            <returns>True if FilterAdministratorToken is enabled, false otherwise.</returns>
        </member>
        <member name="M:SharpSploit.Enumeration.GPO.GetLocalAccountTokenFilterPolicy(System.String)">
            <summary>
            Gets the value of LocalAccountTokenFilterPolicy from a Registry.xml file.
            </summary>
            <author>Dennis Panagiotopoulos (@den_n1s)</author>
            <param name="RegistryXMLPath">Path to the Registry.xml file.</param>
            <returns>True if LocalAccountTokenFilterPolicy is enabled, false otherwise.</returns>
        </member>
        <member name="M:SharpSploit.Enumeration.GPO.GetSeDenyNetworkLogonRight(System.String)">
            <summary>
            Gets the value of SeDenyNetworkLogonRight from a GptTmpl.inf file,
            which determines if Administrators are allowed to perform network authentication.
            </summary>
            <author>Dennis Panagiotopoulos (@den_n1s)</author>
            <param name="GptTmplPath">Path to the GptTmpl.inf file.</param>
            <returns>True if SeDenyNetworkLogonRight is enabled, false otherwise.</returns>
        </member>
        <member name="M:SharpSploit.Enumeration.GPO.GetSeDenyRemoteInteractiveLogonRight(System.String)">
            <summary>
            Gets the value of SeDenyRemoteInteractiveLogonRight from a GptTmpl.inf file,
            which determines if Administrators are allowed to perform remote interactive authentication.
            </summary>
            <author>Dennis Panagiotopoulos (@den_n1s)</author>
            <param name="GptTmplPath">Path to the GptTmpl.inf file.</param>
            <returns>True if SeDenyRemoteInteractiveLogonRight is enabled, false otherwise.</returns>
        </member>
        <member name="M:SharpSploit.Enumeration.GPO.GetRemoteAccessPolicies(System.String,System.String,System.String,System.String)">
            <summary>
            Gets domain computer objects for which remote access policies are applied via GPO.
            </summary>
            <author>Dennis Panagiotopoulos (@den_n1s)</author>
            <param name="Domain">pecifies the domain to use for the query, defaults to the current domain.</param>
            <param name="DomainController">Specifies an Active Directory server (domain controller) to bind to.</param>
            <param name="SearchScope">Specifies the scope to search under, Base/OneLevel/Subtree (default of Subtree).</param>
            <param name="SearchBase">The LDAP source to search through, e.g. /OU=Workstations,DC=domain,DC=local. Useful for OU queries.</param>
            <returns>True if execution succeeds, false otherwise.</returns>
            <remarks>
            Credits to Jon Cave (@joncave) and William Knowles (@william_knows) for their PowerShell implementation.
            https://labs.mwrinfosecurity.com/blog/enumerating-remote-access-policies-through-gpo/
            </remarks>
        </member>
        <member name="T:SharpSploit.Enumeration.Host">
            <summary>
            Host is a library for local host enumeration.
            </summary>
        </member>
        <member name="M:SharpSploit.Enumeration.Host.GetProcessList">
            <summary>
            Gets a list of running processes on the system.
            </summary>
            <returns>List of ProcessResults.</returns>
        </member>
        <member name="M:SharpSploit.Enumeration.Host.GetArchitecture">
            <summary>
            Gets the architecture of the OS.
            </summary>
            <author>Daniel Duggan (@_RastaMouse)</author>
        </member>
        <member name="M:SharpSploit.Enumeration.Host.GetParentProcess(System.Diagnostics.Process)">
            <summary>
            Gets the parent process id of a Process
            </summary>
            <author>Daniel Duggan (@_RastaMouse)</author>
            <param name="Process"></param>
            <returns>Parent Process Id. Returns 0 if unsuccessful</returns>
        </member>
        <member name="M:SharpSploit.Enumeration.Host.GetParentProcess(System.IntPtr)">
            <summary>
            Gets the parent process id of a process handle
            </summary>
            <author>Daniel Duggan (@_RastaMouse)</author>
            <param name="Handle">Handle to the process to get the parent process id of</param>
            <returns>Parent Process Id</returns>
        </member>
        <member name="M:SharpSploit.Enumeration.Host.GetProcessOwner(System.Diagnostics.Process)">
            <summary>
            Gets the username of the owner of a process
            </summary>
            <author>Daniel Duggan (@_RastaMouse)</author>
            <param name="Process">Process to get owner of</param>
            <returns>Username of process owner. Returns empty string if unsuccessful.</returns>
        </member>
        <member name="M:SharpSploit.Enumeration.Host.IsWow64(System.Diagnostics.Process)">
            <summary>
            Checks if a process is a Wow64 process
            </summary>
            <author>Daniel Duggan (@_RastaMouse)</author>
            <param name="Process">Process to check Wow64</param>
            <returns>True if process is Wow64, false otherwise. Returns false if unsuccessful.</returns>
        </member>
        <member name="M:SharpSploit.Enumeration.Host.CreateProcessDump(System.Int32,System.String,System.String)">
            <summary>
            Generates a minidump that represents the memory of a running process. Useful for offline Mimikatz
            if dumping the LSASS process. (Requires Admin)
            </summary>
            <param name="processId">Process ID of the process to generate a minidump for.</param>
            <param name="outputPath">Path to write output file in. Defaults to the current directory.</param>
            <param name="outputFileName">Filename to ouput the minidump to.</param>
            <remarks>
            Authored by Justin Bui (@youslydawg).
            </remarks>
        </member>
        <member name="M:SharpSploit.Enumeration.Host.CreateProcessDump(System.String,System.String,System.String)">
            <summary>
            Generates a minidump that represents the memory of a running process. Useful for offline Mimikatz
            if dumping the LSASS process. (Requires Admin)
            </summary>
            <param name="processName">Name of the process to generate a minidump for.</param>
            <param name="outputPath">Path to write output file in. Defaults to the current directory.</param>
            <param name="outputFileName">Filename to ouput the minidump to.</param>
            <remarks>
            Authored by Justin Bui (@youslydawg).
            </remarks>
        </member>
        <member name="M:SharpSploit.Enumeration.Host.CreateProcessDump(System.Diagnostics.Process,System.String,System.String)">
            <summary>
            Generates a minidump that represents the memory of a running process. Useful for offline Mimikatz
            if dumping the LSASS process. (Requires Admin)
            </summary>
            <param name="process">Process to generate a minidump for.</param>
            <param name="outputPath">Path to write output file in. Defaults to the current directory.</param>
            <param name="outputFileName">Filename to ouput the minidump to.</param>
            <remarks>
            Authored by Justin Bui (@youslydawg).
            </remarks>
        </member>
        <member name="M:SharpSploit.Enumeration.Host.GetHostname">
            <summary>
            Gets the hostname of the system.
            </summary>
            <returns>Hostname of the system.</returns>
        </member>
        <member name="M:SharpSploit.Enumeration.Host.GetUsername">
            <summary>
            Gets the Domain name and username of the current logged on user.
            </summary>
            <returns>Current username.</returns>
        </member>
        <member name="M:SharpSploit.Enumeration.Host.GetCurrentDirectory">
            <summary>
            Gets the full path of the current working directory.
            </summary>
            <returns>Current working directory.</returns>
        </member>
        <member name="M:SharpSploit.Enumeration.Host.GetDirectoryListing">
            <summary>
            Gets a directory listing of the current working directory.
            </summary>
            <returns>List of FileSystemEntryResults.</returns>
        </member>
        <member name="M:SharpSploit.Enumeration.Host.GetDirectoryListing(System.String)">
            <summary>
            Gets a directory listing of a directory.
            </summary>
            <param name="Path">The path of the directory to get a listing of.</param>
            <returns>SharpSploitResultList of FileSystemEntryResults.</returns>
        </member>
        <member name="M:SharpSploit.Enumeration.Host.GetDacl(System.String)">
            <summary>
            Gets a DACL of a file or directory.
            </summary>
            <param name="Path">The path of the file or directory to get a DACL for.</param>
            <returns>List of DaclResults. NULL if not found.</returns>
            <author>Daniel Duggan (@_RastaMouse)</author>
        </member>
        <member name="M:SharpSploit.Enumeration.Host.ChangeCurrentDirectory(System.String)">
            <summary>
            Changes the current working directory.
            </summary>
            <param name="DirectoryName">Relative or absolute path to new working directory.</param>
        </member>
        <member name="T:SharpSploit.Enumeration.Host.ProcessResult">
            <summary>
            ProcessResult represents a running process, used with the GetProcessList() function.
            </summary>
        </member>
        <member name="T:SharpSploit.Enumeration.Host.FileSystemEntryResult">
            <summary>
            FileSystemEntryResult represents a file on disk, used with the GetDirectoryListing() function.
            </summary>
        </member>
        <member name="T:SharpSploit.Enumeration.Host.DaclResult">
            <summary>
            DaclResult represents a DACL of a file or directory on disk, used with the GetDacl() function.
            </summary>
        </member>
        <member name="T:SharpSploit.Enumeration.Keylogger">
            <summary>
            Keylogger allows for the monitoring of user keystrokes.
            </summary>
        </member>
        <member name="M:SharpSploit.Enumeration.Keylogger.StartKeylogger(System.Int32)">
            <summary>
            Starts the Keylogger
            </summary>
            <author>Scottie Austin (@checkymander)</author>
            <returns>String containing the captured keystrokes, along with identification of what window they were entered in.</returns>
            <param name="Seconds">The amount of time in seconds the keylogger should run for before returning keystrokes.</param>
        </member>
        <member name="M:SharpSploit.Enumeration.Keylogger.GetActiveWindowTitle">
            <summary>
            Gets the active window title of the window keystrokes are being entered in.
            </summary>
            <author>Scottie Austin (@checkymander)</author>
            <returns>Title of the active window.</returns>
        </member>
        <member name="T:SharpSploit.Enumeration.Network">
            <summary>
            Network is a library for network enumeration such as identifying live systems and open ports.
            </summary>
        </member>
        <member name="M:SharpSploit.Enumeration.Network.PortScan(System.String,System.Int32,System.Boolean,System.Int32)">
            <summary>
            Conducts a port scan of a specified ComputerName and port and reports if the port is open.
            </summary>
            <param name="ComputerName">ComputerName to port scan.</param>
            <param name="Port">Port to scan.</param>
            <param name="Ping">Optional switch. If true, pings the ComputerName to ensure it's up before port scanning.</param>
            <param name="Timeout">Timeout (in milliseconds) before the port is considered down.</param>
            <returns>List of PortScanResults</returns>
        </member>
        <member name="M:SharpSploit.Enumeration.Network.PortScan(System.Collections.Generic.IList{System.String},System.Int32,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Conducts a port scan of specified ComputerNames on a specified port and reports if the port is open.
            </summary>
            <param name="ComputerNames">ComputerNames to port scan.</param>
            <param name="Port">Port to scan.</param>
            <param name="Ping">Optional switch. If true, pings the ComputerNames to ensure each is up before port scanning.</param>
            <param name="Timeout">Timeout (in milliseconds) before a port is considered down.</param>
            <param name="Threads">Number of threads with which to portscan simultaneously</param>
            <returns>List of PortScanResults</returns>
        </member>
        <member name="M:SharpSploit.Enumeration.Network.PortScan(System.String,System.Collections.Generic.IList{System.Int32},System.Boolean,System.Int32,System.Int32)">
            <summary>
            Conducts a port scan of a specified ComputerName on specified ports and reports open ports.
            </summary>
            <param name="ComputerName">ComputerName to port scan.</param>
            <param name="Ports">Ports to scan.</param>
            <param name="Ping">Optional switch. If true, pings the ComputerName to ensure it's up before port scanning.</param>
            <param name="Timeout">Timeout (in milliseconds) before a port is considered down.</param>
            <param name="Threads">Number of threads with which to portscan simultaneously</param>
            <returns>List of PortScanResults</returns>
        </member>
        <member name="M:SharpSploit.Enumeration.Network.PortScan(System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{System.Int32},System.Boolean,System.Int32,System.Int32)">
            <summary>
            Conducts a port scan of specified ComputerNames on specified ports and reports open ports.
            </summary>
            <param name="ComputerNames">ComputerNames to port scan.</param>
            <param name="Ports">Ports to scan.</param>
            <param name="Ping">Optional switch. If true, pings the ComputerNames to ensure each is up before port scanning.</param>
            <param name="Timeout">Timeout (in milliseconds) before a port is considered down.</param>
            <param name="Threads">Number of threads with which to portscan simultaneously</param>
            <returns>List of PortScanResults</returns>
        </member>
        <member name="M:SharpSploit.Enumeration.Network.Ping(System.String,System.Int32)">
            <summary>
            Pings a specified ComputerName to identify if it is live.
            </summary>
            <param name="ComputerName">ComputerName to ping.</param>
            <param name="Timeout">Timeout (in milliseconds) before a ComputerName is considered down.</param>
            <returns></returns>
        </member>
        <member name="M:SharpSploit.Enumeration.Network.Ping(System.Collections.Generic.IList{System.String},System.Int32,System.Int32)">
            <summary>
            Pings specified ComputerNames to identify live systems.
            </summary>
            <param name="ComputerNames">ComputerNames to ping.</param>
            <param name="Timeout">Timeout (in milliseconds) before a ComputerName is considered down.</param>
            <param name="Threads">Number of threads with which to ping simultaneously</param>
            <returns></returns>
        </member>
        <member name="T:SharpSploit.Enumeration.Network.PingResult">
            <summary>
            PingResult represent the result of a ping, used with the Ping() functions.
            </summary>
        </member>
        <member name="T:SharpSploit.Enumeration.Network.PortScanResult">
            <summary>
            PortScanResult represent the result of a port scan, used with the PortScan() functions.
            </summary>
        </member>
        <member name="T:SharpSploit.Enumeration.Registry">
            <summary>
            Host is a library for local host enumeration.
            </summary>
        </member>
        <member name="M:SharpSploit.Enumeration.Registry.GetRegistryKey(System.String)">
            <summary>
            Gets the value of a RegistryKey.
            </summary>
            <param name="RegHiveKeyValue">The path to the registry key to set, including: hive, subkey, and value name.</param>
            <returns>The value of a RegistryKey, cast as a string.</returns>
        </member>
        <member name="M:SharpSploit.Enumeration.Registry.GetRegistryKey(System.String,System.String)">
            <summary>
            Gets the entries of a RegistryKey or value of a RegistryKey.
            </summary>
            <param name="RegHiveKey">The path to the registry key to set, including: hive and subkey.</param>
            <param name="RegValue">The name of name/value pair to read from in the RegistryKey.</param>
            <returns>List of the entries of the RegistrySubKey or the RegistryValue, cast as a string.</returns>
        </member>
        <member name="M:SharpSploit.Enumeration.Registry.GetRegistryKey(System.String,System.String,System.String)">
            <summary>
            Gets the entries of a RegistryKey or value of a RegistryKey.
            </summary>
            <param name="RegHive">The RegistryHive to read from.</param>
            <param name="RegKey">The RegistryKey, including the hive, to read from.</param>
            <param name="RegValue">The name of name/value pair to read from in the RegistryKey.</param>
            <returns>List of the entries of the RegistrySubKey or the RegistryValue, cast as a string.</returns>
        </member>
        <member name="M:SharpSploit.Enumeration.Registry.GetRegistryKey(Microsoft.Win32.RegistryHive,System.String,System.String)">
            <summary>
            Gets the entries of a RegistryKey or value of a RegistryKey.
            </summary>
            <param name="RegHive">The RegistryHive to read from.</param>
            <param name="RegKey">The RegistryKey in the RegsitryHive to read from.</param>
            <param name="RegValue">The name of name/value pair to read from in the RegistryKey.</param>
            <returns>List of the entries of the RegistrySubKey or the RegistryValue, cast as a string.</returns>
        </member>
        <member name="M:SharpSploit.Enumeration.Registry.GetRegistryKeyValue(Microsoft.Win32.RegistryKey,System.String)">
            <summary>
            Gets a value stored in a RegistryKey.
            </summary>
            <param name="RegHiveKey">The RegistryKey to set.</param>
            <param name="RegValue">The name of name/value pair to read from in the RegistryKey.</param>
            <returns>Content of the value of the RegistryKey, cast as a string.</returns>
        </member>
        <member name="M:SharpSploit.Enumeration.Registry.SetRegistryKey(System.String,System.Object,Microsoft.Win32.RegistryValueKind)">
            <summary>
            Sets a value in the registry.
            </summary>
            <param name="RegHiveKeyValue">The path to the registry key to set, including: hive, subkey, and value name.</param>
            <param name="Value">The value to write to the registry key.</param>
            <param name="ValueKind">The kind of value to write to the registry key.</param>
            <returns>True if succeeded, false otherwise.</returns>
        </member>
        <member name="M:SharpSploit.Enumeration.Registry.SetRegistryKey(System.String,System.String,System.Object,Microsoft.Win32.RegistryValueKind)">
            <summary>
            Sets a value in the registry.
            </summary>
            <param name="RegHiveKey">The path to the registry key to set, including: hive and subkey.</param>
            <param name="RegValue">The name of the RegistryKey to set.</param>
            <param name="Value">The value to write to the registry key.</param>
            <param name="ValueKind">The kind of value to write to the registry key.</param>
            <returns>True if succeeded, false otherwise.</returns>
        </member>
        <member name="M:SharpSploit.Enumeration.Registry.SetRegistryKey(System.String,System.String,System.String,System.Object,Microsoft.Win32.RegistryValueKind)">
            <summary>
            Sets a value in the registry.
            </summary>
            <param name="RegHive">The RegistryHive to set within.</param>
            <param name="RegKey">The RegistryKey to set, including the hive.</param>
            <param name="RegValue">The name of name/value pair to write to in the RegistryKey.</param>
            <param name="Value">The value to write to the registry key.</param>
            <param name="ValueKind">The kind of value to write to the registry key.</param>
            <returns>True if succeeded, false otherwise.</returns>
        </member>
        <member name="M:SharpSploit.Enumeration.Registry.SetRegistryKey(Microsoft.Win32.RegistryHive,System.String,System.String,System.Object,Microsoft.Win32.RegistryValueKind)">
            <summary>
            Sets a value in the registry.
            </summary>
            <param name="RegHive">The RegistryHive to set within.</param>
            <param name="RegKey">The RegistryKey to set, including the hive.</param>
            <param name="RegValue">The name of name/value pair to write to in the RegistryKey.</param>
            <param name="Value">The value to write to the registry key.</param>
            <param name="ValueKind">The kind of value to write to the registry key.</param>
            <returns>True if succeeded, false otherwise.</returns>
        </member>
        <member name="M:SharpSploit.Enumeration.Registry.SetRegistryKeyValue(Microsoft.Win32.RegistryKey,System.String,System.Object,Microsoft.Win32.RegistryValueKind)">
            <summary>
            Sets a value in the registry.
            </summary>
            <param name="RegHiveKey">The RegistryKey to set.</param>
            <param name="RegValue">The name of name/value pair to write to in the RegistryKey.</param>
            <param name="Value">The value to write to the registry key.</param>
            <param name="ValueKind">The kind of value to write to the registry key.</param>
            <returns>True if succeeded, false otherwise.</returns>
        </member>
        <member name="M:SharpSploit.Enumeration.Registry.GetRemoteRegistryKey(System.String,System.String)">
            <summary>
            Gets the value of a RegistryKey.
            </summary>
            <param name="Hostname">Remote hostname to connect to for remote registry.</param>
            <param name="RegHiveKeyValue">The path to the registry key to set, including: hive, subkey, and value name.</param>
            <returns>The value of a RegistryKey, cast as a string.</returns>
        </member>
        <member name="M:SharpSploit.Enumeration.Registry.GetRemoteRegistryKey(System.String,System.String,System.String)">
            <summary>
            Gets the entries of a RegistryKey or value of a RegistryKey.
            </summary>
            <param name="Hostname">Remote hostname to connect to for remote registry.</param>
            <param name="RegHiveKey">The path to the registry key to set, including: hive and subkey.</param>
            <param name="RegValue">The name of name/value pair to read from in the RegistryKey.</param>
            <returns>List of the entries of the RegistrySubKey or the RegistryValue, cast as a string.</returns>
        </member>
        <member name="M:SharpSploit.Enumeration.Registry.GetRemoteRegistryKey(System.String,System.String,System.String,System.String)">
            <summary>
            Gets the entries of a RegistryKey or value of a RegistryKey.
            </summary>
            <param name="Hostname">Remote hostname to connect to for remote registry.</param>
            <param name="RegHive">The RegistryHive to read from.</param>
            <param name="RegKey">The RegistryKey, including the hive, to read from.</param>
            <param name="RegValue">The name of name/value pair to read from in the RegistryKey.</param>
            <returns>List of the entries of the RegistrySubKey or the RegistryValue, cast as a string.</returns>
        </member>
        <member name="M:SharpSploit.Enumeration.Registry.GetRemoteRegistryKey(System.String,Microsoft.Win32.RegistryHive,System.String,System.String)">
            <summary>
            Gets the entries of a RegistryKey or value of a RegistryKey.
            </summary>
            <param name="Hostname">Remote hostname to connect to for remote registry.</param>
            <param name="RegHive">The RegistryHive to read from.</param>
            <param name="RegKey">The RegistryKey in the RegsitryHive to read from.</param>
            <param name="RegValue">The name of name/value pair to read from in the RegistryKey.</param>
            <returns>List of the entries of the RegistrySubKey or the RegistryValue, cast as a string.</returns>
        </member>
        <member name="M:SharpSploit.Enumeration.Registry.SetRemoteRegistryKey(System.String,System.String,System.Object,Microsoft.Win32.RegistryValueKind)">
            <summary>
            Sets a value in the registry.
            </summary>
            <param name="Hostname">Remote hostname to connect to for remote registry.</param>
            <param name="RegHiveKeyValue">The path to the registry key to set, including: hive, subkey, and value name.</param>
            <param name="Value">The value to write to the registry key.</param>
            <param name="ValueKind">The kind of value to write to the registry key.</param>
            <returns>True if succeeded, false otherwise.</returns>
        </member>
        <member name="M:SharpSploit.Enumeration.Registry.SetRemoteRegistryKey(System.String,System.String,System.String,System.Object,Microsoft.Win32.RegistryValueKind)">
            <summary>
            Sets a value in the registry.
            </summary>
            <param name="Hostname">Remote hostname to connect to for remote registry.</param>
            <param name="RegHiveKey">The path to the registry key to set, including: hive and subkey.</param>
            <param name="RegValue">The name of the RegistryKey to set.</param>
            <param name="Value">The value to write to the registry key.</param>
            <param name="ValueKind">The kind of value to write to the registry key.</param>
            <returns>True if succeeded, false otherwise.</returns>
        </member>
        <member name="M:SharpSploit.Enumeration.Registry.SetRemoteRegistryKey(System.String,System.String,System.String,System.String,System.Object,Microsoft.Win32.RegistryValueKind)">
            <summary>
            Sets a value in the registry.
            </summary>
            <param name="Hostname">Remote hostname to connect to for remote registry.</param>
            <param name="RegHive">The RegistryHive to set within.</param>
            <param name="RegKey">The RegistryKey to set, including the hive.</param>
            <param name="RegValue">The name of name/value pair to write to in the RegistryKey.</param>
            <param name="Value">The value to write to the registry key.</param>
            <param name="ValueKind">The kind of value to write to the registry key.</param>
            <returns>True if succeeded, false otherwise.</returns>
        </member>
        <member name="M:SharpSploit.Enumeration.Registry.SetRemoteRegistryKey(System.String,Microsoft.Win32.RegistryHive,System.String,System.String,System.Object,Microsoft.Win32.RegistryValueKind)">
            <summary>
            Sets a value in the registry.
            </summary>
            <param name="Hostname">Remote hostname to connect to for remote registry.</param>
            <param name="RegHive">The RegistryHive to set within.</param>
            <param name="RegKey">The RegistryKey to set, including the hive.</param>
            <param name="RegValue">The name of name/value pair to write to in the RegistryKey.</param>
            <param name="Value">The value to write to the registry key.</param>
            <param name="ValueKind">The kind of value to write to the registry key.</param>
            <returns>True if succeeded, false otherwise.</returns>
        </member>
        <member name="M:SharpSploit.Enumeration.Registry.ConvertToRegistryHive(System.String)">
            <summary>
            Convert a string to a Win32.RegistryHive.
            </summary>
            <param name="RegHive">RegHive value to convert to RegistryHive.</param>
            <returns>Matching RegistryHive value, defaults to CurrentUser if none match.</returns>
        </member>
        <member name="M:SharpSploit.Enumeration.Registry.ConvertRegistryHiveToString(Microsoft.Win32.RegistryHive)">
            <summary>
            Convert Win32.RegistryHive to a string.
            </summary>
            <param name="RegHive">RegistryHive value to convert to string.</param>
            <returns>Matching RegistryHive string, defaults to HKEY_CURRENT_USER if none match.</returns>
        </member>
        <member name="T:SharpSploit.Evasion.Amsi">
            <summary>
            Amsi is a class for manipulating the Antimalware Scan Interface.
            </summary>
        </member>
        <member name="M:SharpSploit.Evasion.Amsi.PatchAmsiScanBuffer">
            <summary>
            Patch the AmsiScanBuffer function in amsi.dll.
            </summary>
            <author>Daniel Duggan (@_RastaMouse)</author>
            <returns>Bool. True if succeeded, otherwise false.</returns>
            <remarks>
            Credit to Adam Chester (@_xpn_).
            </remarks>
        </member>
        <member name="T:SharpSploit.Execution.Assembly">
            <summary>
            Assembly is a library for loading .NET assemblies and executing methods contained within them.
            </summary>
        </member>
        <member name="M:SharpSploit.Execution.Assembly.AssemblyExecute(System.Byte[],System.Object[])">
            <summary>
            Loads a specified .NET assembly byte array and executes the EntryPoint.
            </summary>
            <param name="AssemblyBytes">The .NET assembly byte array.</param>
            <param name="Args">The arguments to pass to the assembly's EntryPoint.</param>
        </member>
        <member name="M:SharpSploit.Execution.Assembly.AssemblyExecute(System.Byte[],System.String,System.String,System.Object[])">
            <summary>
            Loads a specified .NET assembly byte array and executes a specified method within a
            specified type with specified parameters.
            </summary>
            <param name="AssemblyBytes">The .NET assembly byte array.</param>
            <param name="TypeName">The name of the type that contains the method to execute.</param>
            <param name="MethodName">The name of the method to execute.</param>
            <param name="Parameters">The parameters to pass to the method.</param>
            <returns>GenericObjectResult of the method.</returns>
        </member>
        <member name="M:SharpSploit.Execution.Assembly.AssemblyExecute(System.String,System.String,System.String,System.Object[])">
            <summary>
            Loads a specified base64-encoded .NET assembly and executes a specified method within a
            specified type with specified parameters.
            </summary>
            <param name="EncodedAssembly">The base64-encoded .NET assembly byte array.</param>
            <param name="TypeName">The name of the type that contains the method to execute.</param>
            <param name="MethodName">The name of the method to execute.</param>
            <param name="Parameters">The parameters to pass to the method.</param>
            <returns>GenericObjectResult of the method.</returns>
        </member>
        <member name="M:SharpSploit.Execution.Assembly.AssemblyExecute(System.String,System.Object[])">
            <summary>
            Loads a specified base64-encoded .NET assembly and executes the EntryPoint.
            </summary>
            <param name="EncodedAssembly">The base64-encoded .NET assembly byte array.</param>
            <param name="Args">The arguments to pass to the assembly's EntryPoint.</param>
        </member>
        <member name="M:SharpSploit.Execution.Assembly.Load(System.Byte[])">
            <summary>
            Loads a specified .NET assembly byte array.
            </summary>
            <param name="AssemblyBytes">The .NET assembly byte array.</param>
            <returns>Loaded assembly.</returns>
        </member>
        <member name="M:SharpSploit.Execution.Assembly.Load(System.String)">
            <summary>
            Loads a specified .NET assembly byte array.
            </summary>
            <param name="EncodedAssembly">The base64-encoded .NET assembly byte array.</param>
            <returns>Loaded assembly.</returns>
        </member>
        <member name="T:SharpSploit.Execution.DynamicInvoke.Generic">
            <summary>
            Generic is a class for dynamically invoking arbitrary API calls from memory or disk. DynamicInvoke avoids suspicious
            P/Invoke signatures, imports, and IAT entries by loading modules and invoking their functions at runtime.
            </summary>
        </member>
        <member name="M:SharpSploit.Execution.DynamicInvoke.Generic.DynamicAPIInvoke(System.String,System.String,System.Type,System.Object[]@)">
            <summary>
            Dynamically invoke an arbitrary function from a DLL, providing its name, function prototype, and arguments.
            </summary>
            <author>The Wover (@TheRealWover)</author>
            <param name="DLLName">Name of the DLL.</param>
            <param name="FunctionName">Name of the function.</param>
            <param name="FunctionDelegateType">Prototype for the function, represented as a Delegate object.</param>
            <param name="Parameters">Parameters to pass to the function. Can be modified if function uses call by reference.</param>
            <returns>Object returned by the function. Must be unmarshalled by the caller.</returns>
        </member>
        <member name="M:SharpSploit.Execution.DynamicInvoke.Generic.DynamicFunctionInvoke(System.IntPtr,System.Type,System.Object[]@)">
            <summary>
            Dynamically invokes an arbitrary function from a pointer. Useful for manually mapped modules or loading/invoking unmanaged code from memory.
            </summary>
            <author>The Wover (@TheRealWover)</author>
            <param name="FunctionPointer">A pointer to the unmanaged function.</param>
            <param name="FunctionDelegateType">Prototype for the function, represented as a Delegate object.</param>
            <param name="Parameters">Arbitrary set of parameters to pass to the function. Can be modified if function uses call by reference.</param>
            <returns>Object returned by the function. Must be unmarshalled by the caller.</returns>
        </member>
        <member name="M:SharpSploit.Execution.DynamicInvoke.Generic.LoadModuleFromDisk(System.String)">
            <summary>
            Resolves LdrLoadDll and uses that function to load a DLL from disk.
            </summary>
            <author>Ruben Boonen (@FuzzySec)</author>
            <param name="DLLPath">The path to the DLL on disk. Uses the LoadLibrary convention.</param>
            <returns>IntPtr base address of the loaded module or IntPtr.Zero if the module was not loaded successfully.</returns>
        </member>
        <member name="M:SharpSploit.Execution.DynamicInvoke.Generic.GetLibraryAddress(System.String,System.String,System.Boolean)">
            <summary>
            Helper for getting the pointer to a function from a DLL loaded by the process.
            </summary>
            <author>Ruben Boonen (@FuzzySec)</author>
            <param name="DLLName">The name of the DLL (e.g. "ntdll.dll" or "C:\Windows\System32\ntdll.dll").</param>
            <param name="FunctionName">Name of the exported procedure.</param>
            <param name="CanLoadFromDisk">Optional, indicates if the function can try to load the DLL from disk if it is not found in the loaded module list.</param>
            <returns>IntPtr for the desired function.</returns>
        </member>
        <member name="M:SharpSploit.Execution.DynamicInvoke.Generic.GetLibraryAddress(System.String,System.Int16,System.Boolean)">
            <summary>
            Helper for getting the pointer to a function from a DLL loaded by the process.
            </summary>
            <author>Ruben Boonen (@FuzzySec)</author>
            <param name="DLLName">The name of the DLL (e.g. "ntdll.dll" or "C:\Windows\System32\ntdll.dll").</param>
            <param name="Ordinal">Ordinal of the exported procedure.</param>
            <param name="CanLoadFromDisk">Optional, indicates if the function can try to load the DLL from disk if it is not found in the loaded module list.</param>
            <returns>IntPtr for the desired function.</returns>
        </member>
        <member name="M:SharpSploit.Execution.DynamicInvoke.Generic.GetLibraryAddress(System.String,System.String,System.Int64,System.Boolean)">
            <summary>
            Helper for getting the pointer to a function from a DLL loaded by the process.
            </summary>
            <author>Ruben Boonen (@FuzzySec)</author>
            <param name="DLLName">The name of the DLL (e.g. "ntdll.dll" or "C:\Windows\System32\ntdll.dll").</param>
            <param name="FunctionHash">Hash of the exported procedure.</param>
            <param name="Key">64-bit integer to initialize the keyed hash object (e.g. 0xabc or 0x1122334455667788).</param>
            <param name="CanLoadFromDisk">Optional, indicates if the function can try to load the DLL from disk if it is not found in the loaded module list.</param>
            <returns>IntPtr for the desired function.</returns>
        </member>
        <member name="M:SharpSploit.Execution.DynamicInvoke.Generic.GetLoadedModuleAddress(System.String)">
            <summary>
            Helper for getting the base address of a module loaded by the current process. This base
            address could be passed to GetProcAddress/LdrGetProcedureAddress or it could be used for
            manual export parsing. This function uses the .NET System.Diagnostics.Process class.
            </summary>
            <author>Ruben Boonen (@FuzzySec)</author>
            <param name="DLLName">The name of the DLL (e.g. "ntdll.dll").</param>
            <returns>IntPtr base address of the loaded module or IntPtr.Zero if the module is not found.</returns>
        </member>
        <member name="M:SharpSploit.Execution.DynamicInvoke.Generic.GetPebLdrModuleEntry(System.String)">
            <summary>
            Helper for getting the base address of a module loaded by the current process. This base
            address could be passed to GetProcAddress/LdrGetProcedureAddress or it could be used for
            manual export parsing. This function parses the _PEB_LDR_DATA structure.
            </summary>
            <author>Ruben Boonen (@FuzzySec)</author>
            <param name="DLLName">The name of the DLL (e.g. "ntdll.dll").</param>
            <returns>IntPtr base address of the loaded module or IntPtr.Zero if the module is not found.</returns>
        </member>
        <member name="M:SharpSploit.Execution.DynamicInvoke.Generic.GetAPIHash(System.String,System.Int64)">
            <summary>
            Generate an HMAC-MD5 hash of the supplied string using an Int64 as the key. This is useful for unique hash based API lookups.
            </summary>
            <author>Ruben Boonen (@FuzzySec)</author>
            <param name="APIName">API name to hash.</param>
            <param name="Key">64-bit integer to initialize the keyed hash object (e.g. 0xabc or 0x1122334455667788).</param>
            <returns>string, the computed MD5 hash value.</returns>
        </member>
        <member name="M:SharpSploit.Execution.DynamicInvoke.Generic.GetExportAddress(System.IntPtr,System.String)">
            <summary>
            Given a module base address, resolve the address of a function by manually walking the module export table.
            </summary>
            <author>Ruben Boonen (@FuzzySec)</author>
            <param name="ModuleBase">A pointer to the base address where the module is loaded in the current process.</param>
            <param name="ExportName">The name of the export to search for (e.g. "NtAlertResumeThread").</param>
            <returns>IntPtr for the desired function.</returns>
        </member>
        <member name="M:SharpSploit.Execution.DynamicInvoke.Generic.GetExportAddress(System.IntPtr,System.Int16)">
            <summary>
            Given a module base address, resolve the address of a function by manually walking the module export table.
            </summary>
            <author>Ruben Boonen (@FuzzySec)</author>
            <param name="ModuleBase">A pointer to the base address where the module is loaded in the current process.</param>
            <param name="Ordinal">The ordinal number to search for (e.g. 0x136 -> ntdll!NtCreateThreadEx).</param>
            <returns>IntPtr for the desired function.</returns>
        </member>
        <member name="M:SharpSploit.Execution.DynamicInvoke.Generic.GetExportAddress(System.IntPtr,System.String,System.Int64)">
            <summary>
            Given a module base address, resolve the address of a function by manually walking the module export table.
            </summary>
            <author>Ruben Boonen (@FuzzySec)</author>
            <param name="ModuleBase">A pointer to the base address where the module is loaded in the current process.</param>
            <param name="FunctionHash">Hash of the exported procedure.</param>
            <param name="Key">64-bit integer to initialize the keyed hash object (e.g. 0xabc or 0x1122334455667788).</param>
            <returns>IntPtr for the desired function.</returns>
        </member>
        <member name="M:SharpSploit.Execution.DynamicInvoke.Generic.GetNativeExportAddress(System.IntPtr,System.String)">
            <summary>
            Given a module base address, resolve the address of a function by calling LdrGetProcedureAddress.
            </summary>
            <author>Ruben Boonen (@FuzzySec)</author>
            <param name="ModuleBase">A pointer to the base address where the module is loaded in the current process.</param>
            <param name="ExportName">The name of the export to search for (e.g. "NtAlertResumeThread").</param>
            <returns>IntPtr for the desired function.</returns>
        </member>
        <member name="M:SharpSploit.Execution.DynamicInvoke.Generic.GetNativeExportAddress(System.IntPtr,System.Int16)">
            <summary>
            Given a module base address, resolve the address of a function by calling LdrGetProcedureAddress.
            </summary>
            <author>Ruben Boonen (@FuzzySec)</author>
            <param name="ModuleBase">A pointer to the base address where the module is loaded in the current process.</param>
            <param name="Ordinal">The ordinal number to search for (e.g. 0x136 -> ntdll!NtCreateThreadEx).</param>
            <returns>IntPtr for the desired function.</returns>
        </member>
        <member name="M:SharpSploit.Execution.DynamicInvoke.Generic.GetPeMetaData(System.IntPtr)">
            <summary>
            Retrieve PE header information from the module base pointer.
            </summary>
            <author>Ruben Boonen (@FuzzySec)</author>
            <param name="pModule">Pointer to the module base.</param>
            <returns>PE.PE_META_DATA</returns>
        </member>
        <member name="M:SharpSploit.Execution.DynamicInvoke.Generic.GetApiSetMapping">
            <summary>
            Resolve host DLL for API Set DLL.
            </summary>
            <author>Ruben Boonen (@FuzzySec)</author>
            <returns>Dictionary, a combination of Key:APISetDLL and Val:HostDLL.</returns>
        </member>
        <member name="M:SharpSploit.Execution.DynamicInvoke.Generic.CallMappedPEModule(SharpSploit.Execution.ManualMap.PE.PE_META_DATA,System.IntPtr)">
            <summary>
            Call a manually mapped PE by its EntryPoint.
            </summary>
            <author>Ruben Boonen (@FuzzySec)</author>
            <param name="PEINFO">Module meta data struct (PE.PE_META_DATA).</param>
            <param name="ModuleMemoryBase">Base address of the module in memory.</param>
            <returns>void</returns>
        </member>
        <member name="M:SharpSploit.Execution.DynamicInvoke.Generic.CallMappedDLLModule(SharpSploit.Execution.ManualMap.PE.PE_META_DATA,System.IntPtr)">
            <summary>
            Call a manually mapped DLL by DllMain -> DLL_PROCESS_ATTACH.
            </summary>
            <author>Ruben Boonen (@FuzzySec)</author>
            <param name="PEINFO">Module meta data struct (PE.PE_META_DATA).</param>
            <param name="ModuleMemoryBase">Base address of the module in memory.</param>
            <returns>void</returns>
        </member>
        <member name="M:SharpSploit.Execution.DynamicInvoke.Generic.CallMappedDLLModuleExport(SharpSploit.Execution.ManualMap.PE.PE_META_DATA,System.IntPtr,System.String,System.Type,System.Object[])">
            <summary>
            Call a manually mapped DLL by Export.
            </summary>
            <author>Ruben Boonen (@FuzzySec)</author>
            <param name="PEINFO">Module meta data struct (PE.PE_META_DATA).</param>
            <param name="ModuleMemoryBase">Base address of the module in memory.</param>
            <param name="ExportName">The name of the export to search for (e.g. "NtAlertResumeThread").</param>
            <param name="FunctionDelegateType">Prototype for the function, represented as a Delegate object.</param>
            <param name="Parameters">Arbitrary set of parameters to pass to the function. Can be modified if function uses call by reference.</param>
            <returns>void</returns>
        </member>
        <member name="M:SharpSploit.Execution.DynamicInvoke.Generic.GetSyscallStub(System.String)">
            <summary>
            Read ntdll from disk, find/copy the appropriate syscall stub and free ntdll.
            </summary>
            <author>Ruben Boonen (@FuzzySec)</author>
            <param name="FunctionName">The name of the function to search for (e.g. "NtAlertResumeThread").</param>
            <returns>IntPtr, Syscall stub</returns>
        </member>
        <member name="T:SharpSploit.Execution.DynamicInvoke.Native">
            <summary>
            Contains function prototypes and wrapper functions for dynamically invoking NT API Calls.
            </summary>
        </member>
        <member name="T:SharpSploit.Execution.DynamicInvoke.Native.DELEGATES">
             <summary>
             Holds delegates for API calls in the NT Layer.
             Must be public so that they may be used with SharpSploit.Execution.DynamicInvoke.Generic.DynamicFunctionInvoke
             </summary>
             <example>
             
             // These delegates may also be used directly.
            
             // Get a pointer to the NtCreateThreadEx function.
             IntPtr pFunction = Execution.DynamicInvoke.Generic.GetLibraryAddress(@"ntdll.dll", "NtCreateThreadEx");
             
             //  Create an instance of a NtCreateThreadEx delegate from our function pointer.
             DELEGATES.NtCreateThreadEx createThread = (NATIVE_DELEGATES.NtCreateThreadEx)Marshal.GetDelegateForFunctionPointer(
                pFunction, typeof(NATIVE_DELEGATES.NtCreateThreadEx));
            
             //  Invoke NtCreateThreadEx using the delegate
             createThread(ref threadHandle, Execute.Win32.WinNT.ACCESS_MASK.SPECIFIC_RIGHTS_ALL | Execute.Win32.WinNT.ACCESS_MASK.STANDARD_RIGHTS_ALL, IntPtr.Zero,
                 procHandle, startAddress, IntPtr.Zero, Execute.Native.NT_CREATION_FLAGS.HIDE_FROM_DEBUGGER, 0, 0, 0, IntPtr.Zero);
             
             </example>
        </member>
        <member name="T:SharpSploit.Execution.DynamicInvoke.Win32">
            <summary>
            Contains function prototypes and wrapper functions for dynamically invoking Win32 API Calls.
            </summary>
        </member>
        <member name="M:SharpSploit.Execution.DynamicInvoke.Win32.OpenProcess(SharpSploit.Execution.Win32.Kernel32.ProcessAccessFlags,System.Boolean,System.UInt32)">
            <summary>
            Uses DynamicInvocation to call the OpenProcess Win32 API. https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-openprocess
            </summary>
            <author>The Wover (@TheRealWover)</author>
            <param name="dwDesiredAccess"></param>
            <param name="bInheritHandle"></param>
            <param name="dwProcessId"></param>
            <returns></returns>
        </member>
        <member name="M:SharpSploit.Execution.DynamicInvoke.Win32.IsWow64Process(System.IntPtr,System.Boolean@)">
            <summary>
            Uses DynamicInvocation to call the IsWow64Process Win32 API. https://docs.microsoft.com/en-us/windows/win32/api/wow64apiset/nf-wow64apiset-iswow64process
            </summary>
            <returns>Returns true if process is WOW64, and false if not (64-bit, or 32-bit on a 32-bit machine).</returns>
        </member>
        <member name="T:SharpSploit.Execution.Injection.AllocationTechnique">
            <summary>
            Base class for allocation techniques.
            </summary>
        </member>
        <member name="M:SharpSploit.Execution.Injection.AllocationTechnique.IsSupportedPayloadType(SharpSploit.Execution.Injection.PayloadType)">
            <summary>
            Informs objects using this technique whether or not it supports the type of a particular payload.
            </summary>
            <author>The Wover (@TheRealWover)</author>
            <param name="Payload">A payload.</param>
            <returns>Whether or not the payload is of a supported type for this strategy.</returns>
        </member>
        <member name="M:SharpSploit.Execution.Injection.AllocationTechnique.DefineSupportedPayloadTypes">
            <summary>
            Internal method for setting the supported payload types. Used in constructors.
            </summary>
            <author>The Wover (@TheRealWover)</author>
        </member>
        <member name="M:SharpSploit.Execution.Injection.AllocationTechnique.Allocate(SharpSploit.Execution.Injection.PayloadType,System.Diagnostics.Process,System.IntPtr)">
            <summary>
            Allocate the payload to the target process at a specified address.
            </summary>
            <author>The Wover (@TheRealWover)</author>
            <param name="Payload">The payload to allocate to the target process.</param>
            <param name="Process">The target process.</param>
            <param name="Address">The address at which to allocate the payload in the target process.</param>
            <returns>True when allocation was successful. Otherwise, throws relevant exceptions.</returns>
        </member>
        <member name="M:SharpSploit.Execution.Injection.AllocationTechnique.Allocate(SharpSploit.Execution.Injection.PayloadType,System.Diagnostics.Process)">
            <summary>
            Allocate the payload to the target process.
            </summary>
            <author>The Wover (@TheRealWover)</author>
            <param name="Payload">The payload to allocate to the target process.</param>
            <param name="Process">The target process.</param>
            <returns>Base address of allocated memory within the target process's virtual memory space.</returns>
        </member>
        <member name="T:SharpSploit.Execution.Injection.SectionMapAlloc">
            <summary>
            Allocates a payload to a target process using locally-written, remotely-copied shared memory sections.
            </summary>
        </member>
        <member name="M:SharpSploit.Execution.Injection.SectionMapAlloc.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:SharpSploit.Execution.Injection.SectionMapAlloc.#ctor(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Constructor allowing options as arguments.
            </summary>
        </member>
        <member name="M:SharpSploit.Execution.Injection.SectionMapAlloc.IsSupportedPayloadType(SharpSploit.Execution.Injection.PayloadType)">
            <summary>
            States whether the payload is supported.
            </summary>
            <author>The Wover (@TheRealWover)</author>
            <param name="Payload">Payload that will be allocated.</param>
            <returns></returns>
        </member>
        <member name="M:SharpSploit.Execution.Injection.SectionMapAlloc.DefineSupportedPayloadTypes">
            <summary>
            Internal method for setting the supported payload types. Used in constructors.
            Update when new types of payloads are added.
            </summary>
            <author>The Wover (@TheRealWover)</author>
        </member>
        <member name="M:SharpSploit.Execution.Injection.SectionMapAlloc.Allocate(SharpSploit.Execution.Injection.PayloadType,System.Diagnostics.Process)">
            <summary>
            Allocate the payload to the target process. Handles unknown payload types.
            </summary>
            <author>The Wover (@TheRealWover)</author>
            <param name="Payload">The payload to allocate to the target process.</param>
            <param name="Process">The target process.</param>
            <returns>Base address of allocated memory within the target process's virtual memory space.</returns>
        </member>
        <member name="M:SharpSploit.Execution.Injection.SectionMapAlloc.Allocate(SharpSploit.Execution.Injection.PICPayload,System.Diagnostics.Process,System.IntPtr)">
            <summary>
            Allocate the payload in the target process.
            </summary>
            <author>The Wover (@TheRealWover)</author>
            <param name="Payload">The PIC payload to allocate to the target process.</param>
            <param name="Process">The target process.</param>
            <param name="PreferredAddress">The preferred address at which to allocate the payload in the target process.</param>
            <returns>Base address of allocated memory within the target process's virtual memory space.</returns>
        </member>
        <member name="M:SharpSploit.Execution.Injection.SectionMapAlloc.CreateSection(System.UInt64,System.UInt32)">
            <summary>
            Creates a new Section.
            </summary>
            <author>The Wover (@TheRealWover)</author>
            <param name="size">Max size of the Section.</param>
            <param name="allocationAttributes">Section attributes (eg. Win32.WinNT.SEC_COMMIT).</param>
            <returns></returns>
        </member>
        <member name="M:SharpSploit.Execution.Injection.SectionMapAlloc.MapSection(System.IntPtr,System.IntPtr,System.UInt32,System.IntPtr,System.UInt64)">
            <summary>
            Maps a view of a section to the target process.
            </summary>
            <author>The Wover (@TheRealWover)</author>
            <param name="procHandle">Handle the process that the section will be mapped to.</param>
            <param name="sectionHandle">Handle to the section.</param>
            <param name="protection">What permissions to use on the view.</param>
            <param name="addr">Optional parameter to specify the address of where to map the view.</param>
            <param name="sizeData">Size of the view to map. Must be smaller than the max Section size.</param>
            <returns>A struct containing address and size of the mapped view.</returns>
        </member>
        <member name="T:SharpSploit.Execution.Injection.SectionMapAlloc.SectionDetails">
            <summary>
            Holds the data returned from NtMapViewOfSection.
            </summary>
        </member>
        <member name="M:SharpSploit.Execution.Injection.SectionMapAlloc.UnmapSection(System.IntPtr,System.IntPtr)">
            <summary>
            Unmaps a view of a section from a process.
            </summary>
            <author>The Wover (@TheRealWover)</author>
            <param name="hProc">Process to which the view has been mapped.</param>
            <param name="baseAddr">Address of the view (relative to the target process)</param>
            <returns></returns>
        </member>
        <member name="T:SharpSploit.Execution.Injection.ExecutionTechnique">
            <summary>
            Base class for Injection strategies.
            </summary>
        </member>
        <member name="M:SharpSploit.Execution.Injection.ExecutionTechnique.IsSupportedPayloadType(SharpSploit.Execution.Injection.PayloadType)">
            <summary>
            Informs objects using this technique whether or not it supports the type of a particular payload.
            </summary>
            <author>The Wover (@TheRealWover)</author>
            <param name="payload">A payload.</param>
            <returns>Whether or not the payload is of a supported type for this strategy.</returns>
        </member>
        <member name="M:SharpSploit.Execution.Injection.ExecutionTechnique.DefineSupportedPayloadTypes">
            <summary>
            Internal method for setting the supported payload types. Used in constructors.
            </summary>
            <author>The Wover (@TheRealWover)</author>
        </member>
        <member name="M:SharpSploit.Execution.Injection.ExecutionTechnique.Inject(SharpSploit.Execution.Injection.PayloadType,SharpSploit.Execution.Injection.AllocationTechnique,System.Diagnostics.Process)">
            <summary>
            Inject and execute a payload in the target process using a specific allocation technique.
            </summary>
            <author>The Wover (@TheRealWover)</author>
            <param name="Payload">The type of payload to execute.</param>
            <param name="AllocationTechnique">The allocation technique to use.</param>
            <param name="Process">The target process.</param>
            <returns>bool</returns>
        </member>
        <member name="M:SharpSploit.Execution.Injection.ExecutionTechnique.Inject(SharpSploit.Execution.Injection.PayloadType,System.IntPtr,System.Diagnostics.Process)">
            <summary>
            Execute a payload in the target process at a specified address.
            </summary>
            <author>The Wover (@TheRealWover)</author>
            <param name="Payload">The type of payload to execute.</param>
            <param name="BaseAddress">The base address of the payload.</param>
            <param name="Process">The target process.</param>
            <returns>bool</returns>
        </member>
        <member name="M:SharpSploit.Execution.Injection.ExecutionTechnique.Inject(SharpSploit.Execution.Injection.PayloadType,SharpSploit.Execution.Injection.AllocationTechnique)">
            <summary>
            Execute a payload in the current process using a specific allocation technique.
            </summary>
            <author>The Wover (@TheRealWover)</author>
            <param name="Payload">The type of payload to execute.</param>
            <param name="AllocationTechnique">The allocation technique to use.</param>
            <returns></returns>
        </member>
        <member name="T:SharpSploit.Execution.Injection.RemoteThreadCreate">
            <summary>
            Executes a payload in a remote process by creating a new thread. Allows the user to specify which API call to use for remote thread creation.
            </summary>
        </member>
        <member name="M:SharpSploit.Execution.Injection.RemoteThreadCreate.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:SharpSploit.Execution.Injection.RemoteThreadCreate.#ctor(System.Boolean,SharpSploit.Execution.Injection.RemoteThreadCreate.APIS)">
            <summary>
            Constructor allowing options as arguments.
            </summary>
        </member>
        <member name="M:SharpSploit.Execution.Injection.RemoteThreadCreate.IsSupportedPayloadType(SharpSploit.Execution.Injection.PayloadType)">
            <summary>
            States whether the payload is supported.
            </summary>
            <author>The Wover (@TheRealWover)</author>
            <param name="Payload">Payload that will be allocated.</param>
            <returns></returns>
        </member>
        <member name="M:SharpSploit.Execution.Injection.RemoteThreadCreate.DefineSupportedPayloadTypes">
            <summary>
            Internal method for setting the supported payload types. Used in constructors.
            Update when new types of payloads are added.
            </summary>
            <author>The Wover (@TheRealWover)</author>
        </member>
        <member name="M:SharpSploit.Execution.Injection.RemoteThreadCreate.Inject(SharpSploit.Execution.Injection.PICPayload,System.IntPtr,System.Diagnostics.Process)">
            <summary>
            Create a thread in the remote process.
            </summary>
            <author>The Wover (@TheRealWover)</author>
            <param name="Payload">The shellcode payload to execute in the target process.</param>
            <param name="BaseAddress">The address of the shellcode in the target process.</param>
            <param name="Process">The target process to inject into.</param>
            <returns></returns>
        </member>
        <member name="T:SharpSploit.Execution.Injection.Injector">
            <summary>
            Provides static functions for performing injection using a combination of Allocation and Execution components.
            </summary>
            <author>The Wover (@TheRealWover)</author>
        </member>
        <member name="M:SharpSploit.Execution.Injection.Injector.Inject(SharpSploit.Execution.Injection.PayloadType,SharpSploit.Execution.Injection.AllocationTechnique,SharpSploit.Execution.Injection.ExecutionTechnique,System.Diagnostics.Process)">
            <summary>
            Inject a payload into a target process using a specified allocation and execution technique.
            </summary>
            <author>The Wover (@TheRealWover)</author>
            <param name="Payload"></param>
            <param name="AllocationTechnique"></param>
            <param name="ExecutionTechnique"></param>
            <param name="Process"></param>
            <returns></returns>
        </member>
        <member name="M:SharpSploit.Execution.Injection.Injector.Inject(SharpSploit.Execution.Injection.PayloadType,SharpSploit.Execution.Injection.AllocationTechnique,SharpSploit.Execution.Injection.ExecutionTechnique)">
            <summary>
            Inject a payload into the current process using a specified allocation and execution technique.
            </summary>
            <param name="Payload"></param>
            <param name="AllocationTechnique"></param>
            <param name="ExecutionTechnique"></param>
            <returns></returns>
        </member>
        <member name="T:SharpSploit.Execution.Injection.PayloadType">
            <summary>
            Base class for all types of payloads.
            Variants are responsible for specifying what types of payloads they support.
            </summary>
            <author>The Wover (@TheRealWover)</author>
        </member>
        <member name="T:SharpSploit.Execution.Injection.PICPayload">
            <summary>
            Represents payloads that are position-independent-code.
            </summary>
            <author>The Wover (@TheRealWover)</author>
        </member>
        <member name="T:SharpSploit.Execution.Injection.PayloadTypeNotSupported">
            <summary>
            Exception thrown when the type of a payload is not supported by a injection variant.
            </summary>
            <author>The Wover (@TheRealWover)</author>
        </member>
        <member name="T:SharpSploit.Execution.ManualMap.PE">
            <summary>
            Holds data structures for using PEs.
            </summary>
        </member>
        <member name="T:SharpSploit.Execution.ManualMap.Map">
            <summary>
            Class for manually mapping PEs.
            </summary>
        </member>
        <member name="M:SharpSploit.Execution.ManualMap.Map.MapModuleFromDisk(System.String)">
            <summary>
            Maps a DLL from disk into a Section using NtCreateSection.
            </summary>
            <author>The Wover (@TheRealWover), Ruben Boonen (@FuzzySec)</author>
            <param name="DLLPath">Full path fo the DLL on disk.</param>
            <returns>PE.PE_MANUAL_MAP</returns>
        </member>
        <member name="M:SharpSploit.Execution.ManualMap.Map.AllocateFileToMemory(System.String)">
            <summary>
            Allocate file to memory from disk
            </summary>
            <author>Ruben Boonen (@FuzzySec)</author>
            <param name="FilePath">Full path to the file to be alloacted.</param>
            <returns>IntPtr base address of the allocated file.</returns>
        </member>
        <member name="M:SharpSploit.Execution.ManualMap.Map.AllocateBytesToMemory(System.Byte[])">
            <summary>
            Allocate a byte array to memory
            </summary>
            <author>Ruben Boonen (@FuzzySec)</author>
            <param name="FileByteArray">Byte array to be allocated.</param>
            <returns>IntPtr base address of the allocated file.</returns>
        </member>
        <member name="M:SharpSploit.Execution.ManualMap.Map.RelocateModule(SharpSploit.Execution.ManualMap.PE.PE_META_DATA,System.IntPtr)">
            <summary>
            Relocates a module in memory.
            </summary>
            <author>Ruben Boonen (@FuzzySec)</author>
            <param name="PEINFO">Module meta data struct (PE.PE_META_DATA).</param>
            <param name="ModuleMemoryBase">Base address of the module in memory.</param>
            <returns>void</returns>
        </member>
        <member name="M:SharpSploit.Execution.ManualMap.Map.RewriteModuleIAT(SharpSploit.Execution.ManualMap.PE.PE_META_DATA,System.IntPtr)">
            <summary>
            Rewrite IAT for manually mapped module.
            </summary>
            <author>Ruben Boonen (@FuzzySec)</author>
            <param name="PEINFO">Module meta data struct (PE.PE_META_DATA).</param>
            <param name="ModuleMemoryBase">Base address of the module in memory.</param>
            <returns>void</returns>
        </member>
        <member name="M:SharpSploit.Execution.ManualMap.Map.SetModuleSectionPermissions(SharpSploit.Execution.ManualMap.PE.PE_META_DATA,System.IntPtr)">
            <summary>
            Set correct module section permissions.
            </summary>
            <author>Ruben Boonen (@FuzzySec)</author>
            <param name="PEINFO">Module meta data struct (PE.PE_META_DATA).</param>
            <param name="ModuleMemoryBase">Base address of the module in memory.</param>
            <returns>void</returns>
        </member>
        <member name="M:SharpSploit.Execution.ManualMap.Map.MapModuleToMemory(System.String)">
            <summary>
            Manually map module into current process.
            </summary>
            <author>Ruben Boonen (@FuzzySec)</author>
            <param name="ModulePath">Full path to the module on disk.</param>
            <returns>PE_MANUAL_MAP object</returns>
        </member>
        <member name="M:SharpSploit.Execution.ManualMap.Map.MapModuleToMemory(System.Byte[])">
            <summary>
            Manually map module into current process.
            </summary>
            <author>Ruben Boonen (@FuzzySec)</author>
            <param name="Module">Full byte array of the module.</param>
            <returns>PE_MANUAL_MAP object</returns>
        </member>
        <member name="M:SharpSploit.Execution.ManualMap.Map.MapModuleToMemory(System.Byte[],System.IntPtr)">
            <summary>
            Manually map module into current process starting at the specified base address.
            </summary>
            <author>The Wover (@TheRealWover), Ruben Boonen (@FuzzySec)</author>
            <param name="Module">Full byte array of the module.</param>
            <param name="pImage">Address in memory to map module to.</param>
            <returns>PE_MANUAL_MAP object</returns>
        </member>
        <member name="M:SharpSploit.Execution.ManualMap.Map.MapModuleToMemory(System.IntPtr)">
            <summary>
            Manually map module into current process.
            </summary>
            <author>Ruben Boonen (@FuzzySec)</author>
            <param name="pModule">Pointer to the module base.</param>
            <returns>PE_MANUAL_MAP object</returns>
        </member>
        <member name="M:SharpSploit.Execution.ManualMap.Map.MapModuleToMemory(System.IntPtr,System.IntPtr)">
            <summary>
            Manually map module into current process.
            </summary>
            <author>Ruben Boonen (@FuzzySec)</author>
            <param name="pModule">Pointer to the module base.</param>
            <param name="pImage">Pointer to the PEINFO image.</param>
            <returns>PE_MANUAL_MAP object</returns>
        </member>
        <member name="M:SharpSploit.Execution.ManualMap.Map.MapModuleToMemory(System.IntPtr,System.IntPtr,SharpSploit.Execution.ManualMap.PE.PE_META_DATA)">
            <summary>
            Manually map module into current process.
            </summary>
            <author>Ruben Boonen (@FuzzySec)</author>
            <param name="pModule">Pointer to the module base.</param>
            <param name="pImage">Pointer to the PEINFO image.</param>
            <param name="PEINFO">PE_META_DATA of the module being mapped.</param>
            <returns>PE_MANUAL_MAP object</returns>
        </member>
        <member name="M:SharpSploit.Execution.ManualMap.Overload.FindDecoyModule(System.Int64,System.Boolean)">
            <summary>
            Locate a signed module with a minimum size which can be used for overloading.
            </summary>
            <author>The Wover (@TheRealWover)</author>
            <param name="MinSize">Minimum module byte size.</param>
            <param name="LegitSigned">Whether to require that the module be legitimately signed.</param>
            <returns>
            String, the full path for the candidate module if one is found, or an empty string if one is not found.
            </returns>
        </member>
        <member name="M:SharpSploit.Execution.ManualMap.Overload.OverloadModule(System.String,System.String,System.Boolean)">
            <summary>
            Load a signed decoy module into memory, creating legitimate file-backed memory sections within the process. Afterwards overload that
            module by manually mapping a payload in it's place causing the payload to execute from what appears to be file-backed memory.
            </summary>
            <author>The Wover (@TheRealWover), Ruben Boonen (@FuzzySec)</author>
            <param name="PayloadPath">Full path to the payload module on disk.</param>
            <param name="DecoyModulePath">Optional, full path the decoy module to overload in memory.</param>
            <returns>PE.PE_MANUAL_MAP</returns>
        </member>
        <member name="M:SharpSploit.Execution.ManualMap.Overload.OverloadModule(System.Byte[],System.String,System.Boolean)">
            <summary>
            Load a signed decoy module into memory creating legitimate file-backed memory sections within the process. Afterwards overload that
            module by manually mapping a payload in it's place causing the payload to execute from what appears to be file-backed memory.
            </summary>
            <author>The Wover (@TheRealWover), Ruben Boonen (@FuzzySec)</author>
            <param name="Payload">Full byte array for the payload module.</param>
            <param name="DecoyModulePath">Optional, full path the decoy module to overload in memory.</param>
            <returns>PE.PE_MANUAL_MAP</returns>
        </member>
        <member name="T:SharpSploit.Execution.Native">
            <summary>
            Native is a library of enums and structures for Native (NtDll) API functions.
            </summary>
            <remarks>
            A majority of this library is adapted from signatures found at www.pinvoke.net.
            </remarks>
        </member>
        <member name="T:SharpSploit.Execution.Native.NT_CREATION_FLAGS">
            <summary>
            NT_CREATION_FLAGS is an undocumented enum. https://processhacker.sourceforge.io/doc/ntpsapi_8h_source.html
            </summary>
        </member>
        <member name="T:SharpSploit.Execution.Native.NTSTATUS">
            <summary>
            NTSTATUS is an undocument enum. https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-erref/596a1078-e883-4972-9bbc-49e60bebca55
            https://www.pinvoke.net/default.aspx/Enums/NtStatus.html
            </summary>
        </member>
        <member name="M:SharpSploit.Execution.PlatformInvoke.Native.NtCreateThreadEx(System.IntPtr@,SharpSploit.Execution.Win32.WinNT.ACCESS_MASK,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr,System.Boolean,System.Int32,System.Int32,System.Int32,System.IntPtr)">
            <summary>
            NTCreateThreadEx is an undocumented function. Created by Microsoft to be a universal, cross-session solution
            for remote thread creation.
            </summary>
            <param name="threadHandle"></param>
            <param name="desiredAccess"></param>
            <param name="objectAttributes"></param>
            <param name="processHandle"></param>
            <param name="startAddress"></param>
            <param name="parameter"></param>
            <param name="createSuspended"></param>
            <param name="stackZeroBits"></param>
            <param name="sizeOfStack"></param>
            <param name="maximumStackSize"></param>
            <param name="attributeList"></param>
            <returns></returns>
        </member>
        <member name="T:SharpSploit.Execution.PlatformInvoke.Win32">
            <summary>
            Win32 is a library of PInvoke signatures for Win32 API functions.
            </summary>
            <remarks>
            A majority of this library is adapted from signatures found at www.pinvoke.net.
            </remarks>
        </member>
        <member name="T:SharpSploit.Execution.Shell">
            <summary>
            Shell is a library for executing shell commands.
            </summary>
        </member>
        <member name="M:SharpSploit.Execution.Shell.PowerShellExecute(System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Executes specified PowerShell code using System.Management.Automation.dll and bypasses
            AMSI, ScriptBlock Logging, and Module Logging (but not Transcription Logging).
            </summary>
            <param name="PowerShellCode">PowerShell code to execute.</param>
            <param name="OutString">Switch. If true, appends Out-String to the PowerShellCode to execute.</param>
            <param name="BypassLogging">Switch. If true, bypasses ScriptBlock and Module logging.</param>
            <param name="BypassAmsi">Switch. If true, bypasses AMSI.</param>
            <returns>Output of executed PowerShell.</returns>
            <remarks>
            Credit for the AMSI bypass goes to Matt Graeber (@mattifestation). Credit for the ScriptBlock/Module
            logging bypass goes to Lee Christensen (@_tifkin).
            </remarks>
        </member>
        <member name="M:SharpSploit.Execution.Shell.CreateProcess(System.String,System.String,System.String,System.String)">
            <summary>
            Creates a specificed process, optionally with an alternative username and password.
            Equates to `ExecuteWithPath(ShellCommand, Environment.CurrentDirectory, false)`.
            </summary>
            <param name="Command">The Command to execute, including any arguments.</param>
            <param name="Username">Optional alternative username to execute ShellCommand as.</param>
            <param name="Domain">Optional alternative Domain of the username to execute ShellCommand as.</param>
            <param name="Password">Optional password to authenticate the username to execute the ShellCommand as.</param>
            <returns>Output of the created process.</returns>
        </member>
        <member name="M:SharpSploit.Execution.Shell.CreateCmdProcess(System.String,System.String,System.String,System.String)">
            <summary>
            Creates a specificed process, optionally with an alternative username and password.
            Equates to `CreateProcess("cmd.exe /c " + ShellCommand)`.
            </summary>
            <param name="Command">The Command to execute, including any arguments.</param>
            <param name="Username">Optional alternative username to execute ShellCommand as.</param>
            <param name="Domain">Optional alternative Domain of the username to execute ShellCommand as.</param>
            <param name="Password">Optional password to authenticate the username to execute the ShellCommand as.</param>
            <returns>Output of the created process.</returns>
        </member>
        <member name="M:SharpSploit.Execution.Shell.ShellExecute(System.String,System.String,System.String,System.String)">
            <summary>
            Executes a specified shell command, optionally with an alternative username and password.
            Equates to `ExecuteWithPath(ShellCommand, Environment.CurrentDirectory)`.
            </summary>
            <param name="ShellCommand">The ShellCommand to execute, including any arguments.</param>
            <param name="Username">Optional alternative username to execute ShellCommand as.</param>
            <param name="Domain">Optional alternative Domain of the username to execute ShellCommand as.</param>
            <param name="Password">Optional password to authenticate the username to execute the ShellCommand as.</param>
            <returns>Empty string, no output is captured when UseShellExecute is true.</returns>
        </member>
        <member name="M:SharpSploit.Execution.Shell.ShellCmdExecute(System.String,System.String,System.String,System.String)">
            <summary>
            Executes a specified shell command, optionally with an alternative username and password.
            Equates to `ShellExecute("cmd.exe /c " + ShellCommand)`.
            </summary>
            <param name="ShellCommand">The ShellCommand to execute, including any arguments.</param>
            <param name="Username">Optional alternative username to execute ShellCommand as.</param>
            <param name="Domain">Optional alternative Domain of the username to execute ShellCommand as.</param>
            <param name="Password">Optional password to authenticate the username to execute the ShellCommand as.</param>
            <returns>Empty string, no output is captured when UseShellExecute is true.</returns>
        </member>
        <member name="M:SharpSploit.Execution.Shell.Execute(System.String,System.Boolean,System.String,System.String,System.String)">
            <summary>
            Executes a specified command, optionally with an alternative username and password.
            </summary>
            <param name="Command">The ShellCommand to execute, including any arguments.</param>
            <param name="UseShellExecute">Switch: true to use ShellExecute, false to use CreateProcess.</param>
            <param name="Username">Optional alternative username to execute ShellCommand as.</param>
            <param name="Domain">Optional alternative Domain of the username to execute ShellCommand as.</param>
            <param name="Password">Optional password to authenticate the username to execute the ShellCommand as.</param>
            <returns>Output of the command if UseShellExecute false, empty string if true.</returns>
        </member>
        <member name="M:SharpSploit.Execution.Shell.Execute(System.String,System.String,System.Boolean,System.String,System.String,System.String)">
            <summary>
            Executes a specified shell command from a specified directory, optionally with an alternative username and password.
            </summary>
            <param name="Command">The Command to execute, including any arguments.</param>
            <param name="Path">The Path of the directory from which to execute the ShellCommand.</param>
            <param name="UseShellExecute">Switch: true to use ShellExecute, false to use CreateProcess.</param>
            <param name="Username">Optional alternative username to execute ShellCommand as.</param>
            <param name="Domain">Optional alternative Domain of the username to execute ShellCommand as.</param>
            <param name="Password">Optional password to authenticate the username to execute the ShellCommand as.</param>
            <returns>Output of the command if UseShellExecute false, empty string if true.</returns>
        </member>
        <member name="M:SharpSploit.Execution.Shell.CreateProcessWithToken(System.String,System.IntPtr)">
            <summary>
            Creates a process with a specified impersonated token. Requires SeAssignPrimaryTokenPrivilege,
            typically only available to adminsitrative users.
            </summary>
            <author>Calvin Hedler (@001SPARTaN)</author>
            <param name="Command">The Command to execute, including any arguments.</param>
            <param name="hToken">A handle to the impersonated token.</param>
            <returns>Output of the created process.</returns>
        </member>
        <member name="M:SharpSploit.Execution.Shell.CreateProcessWithToken(System.String,System.String,System.IntPtr)">
            <summary>
            Creates a process with a specified impersonated token. Requires SeAssignPrimaryTokenPrivilege,
            typically only available to adminsitrative users.
            </summary>
            <author>Calvin Hedler (@001SPARTaN)</author>
            <param name="Command">The command to execute, including any arguments.</param>
            <param name="Path">The path of the directory from which to execute the shell command.</param>
            <param name="hToken">A handle to the impersonated token.</param>
            <returns>Output of the created process.</returns>
        </member>
        <member name="T:SharpSploit.Execution.ShellCode">
            <summary>
            ShellCode includes a method for executing shellcode.
            </summary>
        </member>
        <member name="M:SharpSploit.Execution.ShellCode.ShellCodeExecute(System.Byte[])">
            <summary>
            Executes a specified ShellCode byte array by copying it to pinned memory, modifying the memory
            permissions with VirtualProtect(), and executing using a delegate.
            </summary>
            <param name="ShellCode">ShellCode byte array to execute.</param>
            <returns>Boolean. True if execution succeeds, false otherwise.</returns>
            <remarks>Based upon code written by Matt Nelson (@enigma0x3) and Matt Graeber (@mattifestation).</remarks>
        </member>
        <member name="T:SharpSploit.Execution.Win32">
            <summary>
            Win32 is a library of enums and structures for Win32 API functions.
            </summary>
            <remarks>
            A majority of this library is adapted from signatures found at www.pinvoke.net.
            </remarks>
        </member>
        <member name="T:SharpSploit.Generic.GenericObjectResult">
            <summary>
            GenericObjectResult for listing objects whose type is unknown at compile time.
            </summary>
        </member>
        <member name="T:SharpSploit.Generic.SharpSploitResultList`1">
            <summary>
            SharpSploitResultList extends the IList interface for SharpSploitResults to easily
            format a list of results from various SharpSploit functions.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:SharpSploit.Generic.SharpSploitResultList`1.FormatList">
            <summary>
            Formats a SharpSploitResultList to a string similar to PowerShell's Format-List function.
            </summary>
            <returns>string</returns>
        </member>
        <member name="M:SharpSploit.Generic.SharpSploitResultList`1.ToString">
            <summary>
            Formats a SharpSploitResultList as a string. Overrides ToString() for convenience.
            </summary>
            <returns>string</returns>
        </member>
        <member name="T:SharpSploit.Generic.SharpSploitResult">
            <summary>
            Abstract class that represents a result from a SharpSploit function.
            </summary>
        </member>
        <member name="T:SharpSploit.Generic.SharpSploitResultProperty">
            <summary>
            SharpSploitResultProperty represents a property that is a member of a SharpSploitResult's ResultProperties.
            </summary>
        </member>
        <member name="T:SharpSploit.LateralMovement.DCOM">
            <summary>
            DCOM is a class for executing DCOM lateral movement techniques.
            </summary>
        </member>
        <member name="M:SharpSploit.LateralMovement.DCOM.DCOMExecute(System.String,System.String,System.String,System.String,SharpSploit.LateralMovement.DCOM.DCOMMethod)">
            <summary>
            Execute a process on a remote system using various DCOM methods.
            </summary>
            <param name="ComputerName">ComputerName of remote system to execute process.</param>
            <param name="Command">Command to execute on remote system.</param>
            <param name="Parameters"></param>
            <param name="Directory"></param>
            <param name="Method">DCOM execution method to use. Defaults to MMC20.Application.</param>
            <returns>Bool. True if execution succeeds, false otherwise.</returns>
            <remarks>
            Credit for the DCOM lateral movement techniques goes to Matt Nelson (@enigma0x3). This is
            a port of Steve Borosh (rvrshell)'s Invoke-DCOM implementation available
            here: https://github.com/rvrsh3ll/Misc-Powershell-Scripts/blob/master/Invoke-DCOM.ps1
            </remarks>
        </member>
        <member name="M:SharpSploit.LateralMovement.DCOM.DCOMExecute(System.Collections.Generic.List{System.String},System.String,System.String,System.String,SharpSploit.LateralMovement.DCOM.DCOMMethod)">
            <summary>
            Execute a process on a remote system using various DCOM methods.
            </summary>
            <param name="ComputerNames">ComputerNames of remote systems to execute process.</param>
            <param name="Command">Command to execute on remote system.</param>
            <param name="Parameters"></param>
            <param name="Directory"></param>
            <param name="Method">DCOM execution method to use. Defaults to MMC20.Application.</param>
            <returns>Bool. True if execution succeeds, false otherwise.</returns>
            <remarks>
            Credit for the DCOM lateral movement techniques goes to Matt Nelson (@enigma0x3). This is
            a port of Steve Borosh (rvrshell)'s Invoke-DCOM implementation available
            here: https://github.com/rvrsh3ll/Misc-Powershell-Scripts/blob/master/Invoke-DCOM.ps1
            </remarks>
        </member>
        <member name="T:SharpSploit.LateralMovement.PowerShellRemoting">
            <summary>
            PowerShellRemoting is a class for executing PowerShell commands remotely.
            </summary>
        </member>
        <member name="M:SharpSploit.LateralMovement.PowerShellRemoting.InvokeCommand(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Invoke a PowerShell command on a remote machine.
            </summary>
            <param name="ComputerName">ComputerName of remote system to execute process.</param>
            <param name="Command">Command to execute on remote system.</param>
            <param name="Domain">Domain for explicit credentials.</param>
            <param name="Username">Username for explicit credentials.</param>
            <param name="Password">Password for explicit credentials.</param>
            <returns>String. Results of the PowerShell command.</returns>
            <author>Daniel Duggan (@_RastaMouse)</author>
            <remarks>
            The function won't return as long as the command is still running on the remote target.
            </remarks>
        </member>
        <member name="T:SharpSploit.LateralMovement.SCM">
            <summary>
            SCM is a class for interacting with the Service Control Manager on a target computer.
            </summary>
        </member>
        <member name="M:SharpSploit.LateralMovement.SCM.GetService(System.String,System.String)">
            <summary>
            Get a service on a remote computer.
            </summary>
            <param name="ComputerName">The ComputerName of the remote machine.</param>
            <param name="DisplayName">The DisplayName of the service to retrieve.</param>
            <returns>ServiceResult that represents the given service. NULL if not found</returns>
            <author>Ryan Cobb (@cobbr_io)</author>
        </member>
        <member name="M:SharpSploit.LateralMovement.SCM.GetServices(System.String)">
            <summary>
            Get all services on a remote computer.
            </summary>
            <param name="ComputerName">The ComputerName of the remote machine.</param>
            <returns>A SharpSploitResultList of ServiceResults. NULL if none found.</returns>
            <author>Daniel Duggan (@_RastaMouse)</author>
        </member>
        <member name="M:SharpSploit.LateralMovement.SCM.CreateService(System.String,System.String,System.String,System.String)">
            <summary>
            Creates a new service on a remote computer.
            </summary>
            <param name="ComputerName">The ComputerName of the remote machine.</param>
            <param name="ServiceName">The short service name.</param>
            <param name="ServiceDisplayName">The friendly display name.</param>
            <param name="BinaryPath">The path to the Service executable.</param>
            <returns>Bool. True if execution succeeds, false otherwise.</returns>
            <author>Daniel Duggan (@_RastaMouse)</author>
        </member>
        <member name="M:SharpSploit.LateralMovement.SCM.StartService(System.String,System.String)">
            <summary>
            Starts a service on a remote computer.
            </summary>
            <param name="ComputerName">The ComputerName of the remote machine.</param>
            <param name="DisplayName">The DisplayName of the service to retrieve.</param>
            <returns>Bool. True if execution succeeds, false otherwise.</returns>
            <author>Daniel Duggan (@_RastaMouse)</author>
        </member>
        <member name="M:SharpSploit.LateralMovement.SCM.StopService(System.String,System.String)">
            <summary>
            Stops a service on a remote computer.
            </summary>
            <param name="ComputerName">The ComputerName of the remote machine.</param>
            <param name="DisplayName">The DisplayName of the service to stop.</param>
            <returns>Bool. True if execution succeeds, false otherwise.</returns>
            <author>Daniel Duggan (@_RastaMouse)</author>
        </member>
        <member name="M:SharpSploit.LateralMovement.SCM.DeleteService(System.String,System.String)">
            <summary>
            Deletes a service on a remote computer.
            </summary>
            <param name="ComputerName">The ComputerName of the remote machine.</param>
            <param name="ServiceName">The short ServiceName of the service to delete.</param>
            <returns>Bool. True if execution succeeds, false otherwise.</returns>
            <author>Daniel Duggan (@_RastaMouse)</author>
        </member>
        <member name="M:SharpSploit.LateralMovement.SCM.PSExec(System.String,System.String,System.String,System.String)">
            <summary>
            Execute a process on a remote computer using a PSExec-like technique.
            </summary>
            <param name="ComputerName">The ComputerName of the remote machine.</param>
            <param name="ServiceName">The short ServiceName of the service to create.</param>
            <param name="DisplayName">The DisplayName of the service to create.</param>
            <param name="BinaryPath">The path to the Service Executable.</param>
            <returns>Bool. True if execution succeeds, false otherwise.</returns>
            <author>Daniel Duggan (@_RastaMouse)</author>
        </member>
        <member name="M:SharpSploit.LateralMovement.SCM.CloseHandle(System.IntPtr)">
            <summary>
            Closes Service Handles.
            </summary>
            <param name="handle">The handle to close.</param>
            <returns>Bool. True if execution succeeds, false otherwise.</returns>
            <author>
            Daniel Duggan (@_RastaMouse)
            </author>
        </member>
        <member name="M:SharpSploit.LateralMovement.SCM.OpenServiceManager(System.String)">
            <summary>
            Opens the Service Control Manager on the target computer.
            </summary>
            <param name="ComputerName">The target computer.</param>
            <returns>IntPtr. Returns a handle to the SCM.</returns>
            <author>Daniel Duggan (@_RastaMouse)</author>
        </member>
        <member name="T:SharpSploit.LateralMovement.WMI">
            <summary>
            WMI is a class for executing WMI lateral movement techniques.
            </summary>
        </member>
        <member name="M:SharpSploit.LateralMovement.WMI.WMIExecute(System.String,System.String,System.String,System.String)">
            <summary>
            Execute a process on a remote system using the WMI Win32_Process.Create method.
            </summary>
            <param name="ComputerName">ComputerName of remote system to execute process.</param>
            <param name="Command">Command to execute on remote system.</param>
            <param name="Username">Username to authenticate as to the remote system.</param>
            <param name="Password">Password to authenticate the user.</param>
            <returns>WmiExecuteResult, null on failure.</returns>
        </member>
        <member name="M:SharpSploit.LateralMovement.WMI.WMIExecute(System.Collections.Generic.List{System.String},System.String,System.String,System.String)">
            <summary>
            Execute a process on a remote system using the WMI Win32_Process.Create method.
            </summary>
            <param name="ComputerNames">ComputerNames of remote systems to execute process.</param>
            <param name="Command">Command to execute on remote system.</param>
            <param name="Username">Username to authenticate as to the remote system.</param>
            <param name="Password">Password to authenticate the user.</param>
            <returns>Bool. True if execution succeeds, false otherwise.</returns>
        </member>
        <member name="T:SharpSploit.Misc.CountdownEvent">
            <summary>
            CountdownEvent is used for counting Asynchronous operations
            </summary>
            <remarks>
            Adapted from https://stackoverflow.com/questions/6790499
            </remarks>
        </member>
        <member name="M:SharpSploit.Misc.Utilities.FileHasValidSignature(System.String)">
            <summary>
            Checks that a file is signed and has a valid signature.
            </summary>
            <param name="FilePath">Path of file to check.</param>
            <returns></returns>
        </member>
        <member name="T:SharpSploit.Persistence.Autorun">
            <summary>
            Autorun is a class for abusing the Windows Registry to establish peristence.
            </summary>
        </member>
        <member name="M:SharpSploit.Persistence.Autorun.InstallAutorun(Microsoft.Win32.RegistryHive,System.String,System.String)">
            <summary>
            Installs an autorun value in HKCU or HKLM to execute a payload.
            </summary>
            <author>Daniel Duggan (@_RastaMouse)</author>
            <returns>True if execution succeeds, false otherwise.</returns>
            <param name="TargetHive">Target hive to install autorun. CurrentUser or LocalMachine.</param>
            <param name="Value">Value to set in the registry.</param>
            <param name="Name">Name for the registy value. Defaults to "Updater".</param>
        </member>
        <member name="M:SharpSploit.Persistence.Autorun.InstallAutorun(System.String,System.String,System.String)">
            <summary>
            Installs an autorun value in HKCU or HKLM to execute a payload.
            </summary>
            <author>Daniel Duggan (@_RastaMouse)</author>
            <returns>True if execution succeeds, false otherwise.</returns>
            <param name="TargetHive">Target hive to install autorun. CurrentUser or LocalMachine.</param>
            <param name="Value">Value to set in the registry.</param>
            <param name="Name">Name for the registy value. Defaults to "Updater".</param>
        </member>
        <member name="T:SharpSploit.Persistence.COM">
            <summary>
            COM is a class for abusing the Microsoft Component Object Model to establish peristence.
            </summary>
        </member>
        <member name="M:SharpSploit.Persistence.COM.HijackCLSID(System.String,System.String)">
            <summary>
            Hijacks a CLSID key to execute a payload. 
            </summary>
            <author>Dennis Panagiotopoulos (@den_n1s)</author>
            <returns>Bool. True if execution succeeds, false otherwise.</returns>
            <remarks>
            Credit to Ruben Boonen (@FuzzySec) for his PowerShell implementation of this technique.
            </remarks>
            <param name="CLSID">Missing CLSID to abuse.</param>
            <param name="ExecutablePath">Path to the executable payload.</param>
        </member>
        <member name="T:SharpSploit.Persistence.Startup">
            <summary>
            Startup is a class for abusing the Windows Startup folder to establish peristence.
            </summary>
        </member>
        <member name="M:SharpSploit.Persistence.Startup.InstallStartup(System.String,System.String)">
            <summary>
            Installs a payload into the current users startup folder.
            </summary>
            <author>Daniel Duggan (@_RastaMouse)</author>
            <param name="Payload">Payload to write to a file.</param>
            <param name="FileName">Name of the file to write. Defaults to "startup.bat"</param>
            <returns>True if execution succeeds, false otherwise.</returns>
        </member>
        <member name="T:SharpSploit.Persistence.WMI">
            <summary>
            WMI is a class for abusing WMI Event Subscriptions to establish peristence. Requires elevation.
            </summary>
        </member>
        <member name="M:SharpSploit.Persistence.WMI.InstallWMIPersistence(System.String,SharpSploit.Persistence.WMI.EventFilter,SharpSploit.Persistence.WMI.EventConsumer,System.String,System.String,SharpSploit.Persistence.WMI.ScriptingEngine)">
            <summary>
            Creates a WMI Event, Consumer and Binding to execuate a payload.
            </summary>
            <author>Daniel Duggan (@_RastaMouse)</author>
            <returns>Bool. True if execution succeeds, false otherwise.</returns>
            <remarks>
            Credit to Andrew Luke (@sw4mp_f0x) for PowerLurk and
            Dominic Chell (@domchell) for Persistence Part 3 – WMI Event Subscription.
            </remarks>
            <param name="EventName">An arbitrary name to be assigned to the new WMI Event.</param>
            <param name="EventFilter">Specifies the event trigger to use. The options are ProcessStart.</param>
            <param name="EventConsumer">Specifies the action to carry out. The options are CommandLine (OS Command) and ActiveScript (JScript or VBScript).</param>
            <param name="Payload">Specifies the CommandLine or ActiveScript payload to run.</param>
            <param name="ProcessName">Specifies the process name when the ProcessStart trigger is selected. Defaults to notepad.exe.</param>
            <param name="ScriptingEngine">Specifies the scripting engine when the ActiveScript consumer is selected. Defaults to VBScript.</param>
        </member>
        <member name="T:SharpSploit.Pivoting.ReversePortForwarding">
            <summary>
            ReversePortForwarding is a class that allows the addition and removal of Reverse Port Forwards.
            </summary>
        </member>
        <member name="M:SharpSploit.Pivoting.ReversePortForwarding.CreateReversePortForward(System.Int32,System.String,System.Int32)">
            <summary>
            Creates a new Reverse Port Forward.
            </summary>
            <param name="BindPort">The port to bind on the local system.</param>
            <param name="ForwardAddress">The IP Address or DNS name to forward traffic to.</param>
            <param name="ForwardPort">The port to forward traffic to.</param>
            <returns>Bool.</returns>
            <author>Daniel Duggan (@_RastaMouse)</author>
        </member>
        <member name="M:SharpSploit.Pivoting.ReversePortForwarding.CreateReversePortForward(System.Int32,System.Net.IPAddress,System.Int32)">
            <summary>
            Creates a new Reverse Port Forward.
            </summary>
            <param name="BindPort">The port to bind on the local system.</param>
            <param name="ForwardAddress">The IP Address or DNS name to forward traffic to.</param>
            <param name="ForwardPort">The port to forward traffic to.</param>
            <returns>Bool.</returns>
            <author>Daniel Duggan (@_RastaMouse)</author>
        </member>
        <member name="M:SharpSploit.Pivoting.ReversePortForwarding.DeleteReversePortForward(System.Int32)">
            <summary>
            Deletes an active Reverse Port Forward.
            </summary>
            <param name="BindPort">The bind port of the Reverse Port Forward.</param>
            <returns>Bool.</returns>
            <author>Daniel Duggan (@_RastaMouse)</author>
        </member>
        <member name="M:SharpSploit.Pivoting.ReversePortForwarding.GetReversePortForwards">
            <summary>
            Gets a list of active Reverse Port Forwards.
            </summary>
            <returns>A SharpSploitResultList of ReversePortFwdResult</returns>
            <author>Daniel Duggan (@_RastaMouse)</author>
        </member>
        <member name="M:SharpSploit.Pivoting.ReversePortForwarding.FlushReversePortFowards">
            <summary>
            Delete all active Reverse Port Forwards.
            </summary>
            <author>Daniel Duggan (@_RastaMouse)</author>
        </member>
        <member name="T:SharpSploit.PrivilegeEscalation.Exchange">
            <summary>
            Exchange is a class for abusing Microsoft Exchange for privilege escalation.
            </summary>
        </member>
        <member name="T:SharpSploit.PrivilegeEscalation.Exchange.ExchangeVersion">
            <summary>
            Enum for varions versions of Microsoft Exchange
            </summary>
        </member>
        <member name="F:SharpSploit.PrivilegeEscalation.Exchange.ExchangeVersion.Exchange2007">
            <summary>Exchange 2007</summary>
        </member>
        <member name="F:SharpSploit.PrivilegeEscalation.Exchange.ExchangeVersion.Exchange2007_SP1">
            <summary>Exchange 2007 SP1</summary>
        </member>
        <member name="F:SharpSploit.PrivilegeEscalation.Exchange.ExchangeVersion.Exchange2010">
            <summary>Exchange 2010</summary>
        </member>
        <member name="F:SharpSploit.PrivilegeEscalation.Exchange.ExchangeVersion.Exchange2010_SP1">
            <summary>Exchange 2010 SP1</summary>
        </member>
        <member name="F:SharpSploit.PrivilegeEscalation.Exchange.ExchangeVersion.Exchange2010_SP2">
            <summary>Exchange 2010 SP2</summary>
        </member>
        <member name="F:SharpSploit.PrivilegeEscalation.Exchange.ExchangeVersion.Exchange2013">
            <summary>Exchange 2013</summary>
        </member>
        <member name="F:SharpSploit.PrivilegeEscalation.Exchange.ExchangeVersion.Exchange2013_SP1">
            <summary>Exchange 2013 SP1</summary>
        </member>
        <member name="F:SharpSploit.PrivilegeEscalation.Exchange.ExchangeVersion.Exchange2016">
            <summary>Exchange 2016</summary>
        </member>
        <member name="M:SharpSploit.PrivilegeEscalation.Exchange.PrivExchangePushNotification(System.String,System.String,SharpSploit.PrivilegeEscalation.Exchange.ExchangeVersion)">
            <summary>
            Performs the "PrivExchange" attack to abuse Exchange EWS to subscribe to push notifications to relay the Exchange authentication.
            This attack relies on the use of a relay constructed outside of SharpSploit.
            </summary>
            <author>Dennis Panagiotopoulos (@den_n1s)</author>
            <param name="EWSUri">The URI of the Exchange EWS instance to perform the relay against. For example: http(s)://[hostname]:[port]/EWS/Exchange.asmx.</param>
            <param name="RelayUri">Set the attacker's IP.</param>
            <param name="ExchangeVersion">Microsoft Exchange version. Defaults to Exchange2010.</param>
            <returns>Bool. True if execution succeeds, false otherwise.</returns>
            <remarks>
            Credits to Dirk-jan Molemma (@_dirkjan) for the discovery of this attack and Dave Cossa (@G0ldenGunSec) for his PowerShell implementation.
            </remarks>
        </member>
    </members>
</doc>
