<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SharpSploit</name>
    </assembly>
    <members>
        <member name="T:SharpSploit.Credentials.Mimikatz">
            <summary>
            (SharpSploit.Credentials.)Mimikatz is a library for executing Mimikatz functions. SharpSploit's implementation
            uses a PE Loader to execute Mimikatz functions. This is a wrapper class that loads the PE and executes user-
            specified Mimikatz functions
            </summary>
            <remarks>
            Mimikatz is a tool for playing with credentials in Windows, written by Benjamin Delpy (@gentilkiwi). (Found
            at https://github.com/gentilkiwi/mimikatz).
            SharpSploit's PE Loader is adapted from work by Casey Smith (@subtee). (No longer available at original location.)
            This wrapper class is adapted from Chris Ross (@xorrior)'s implementation. (Found
            at https://github.com/xorrior/Random-CSharpTools/tree/master/DllLoader/DllLoader)
            </remarks>
        </member>
        <member name="M:SharpSploit.Credentials.Mimikatz.Command(System.String)">
            <summary>
            Loads the Mimikatz PE with `PE.Load()` and executes a chosen Mimikatz command.
            </summary>
            <param name="Command">Mimikatz command to be executed.</param>
            <returns>Mimikatz output.</returns>
        </member>
        <member name="M:SharpSploit.Credentials.Mimikatz.LogonPasswords">
            <summary>
            Loads the Mimikatz PE with `PE.Load()` and executes the Mimikatzcommand to retrieve plaintext
            passwords from LSASS. Equates to `Command("privilege::debug sekurlsa::logonPasswords")`. (Requires Admin)
            </summary>
            <returns>Mimikatz output.</returns>
        </member>
        <member name="M:SharpSploit.Credentials.Mimikatz.SamDump">
            <summary>
            Loads the Mimikatz PE with `PE.Load()` and executes the Mimikatz command to retrieve password hashes
            from the SAM database. Equates to `Command("privilege::debug lsadump::sam")`. (Requires Admin)
            </summary>
            <returns>Mimikatz output.</returns>
        </member>
        <member name="M:SharpSploit.Credentials.Mimikatz.LsaSecrets">
            <summary>
            Loads the Mimikatz PE with `PE.Load()` and executes the Mimikatz command to retrieve LSA secrets
            stored in registry. Equates to `Command("privilege::debug lsadump::secrets")`. (Requires Admin)
            </summary>
            <returns>Mimikatz output.</returns>
        </member>
        <member name="M:SharpSploit.Credentials.Mimikatz.LsaCache">
            <summary>
            Loads the Mimikatz PE with `PE.Load()` and executes the Mimikatz command to retrieve Domain
            Cached Credentials hashes from registry. Equates to `Command("privilege::debug lsadump::cache")`.
            (Requires Admin)
            </summary>
            <returns>Mimikatz output.</returns>
        </member>
        <member name="M:SharpSploit.Credentials.Mimikatz.Wdigest">
            <summary>
            Loads the Mimikatz PE with `PE.Load()` and executes the Mimikatz command to retrieve Wdigest
            credentials from registry. Equates to `Command("sekurlsa::wdigest")`.
            </summary>
            <returns>Mimikatz output.</returns>
        </member>
        <member name="M:SharpSploit.Credentials.Mimikatz.All">
            <summary>
            Loads the Mimikatz PE with `PE.Load()` and executes each of the builtin local commands (not DCSync). (Requires Admin)
            </summary>
            <returns>Mimikatz output.</returns>
        </member>
        <member name="M:SharpSploit.Credentials.Mimikatz.DCSync(System.String,System.String,System.String)">
            <summary>
            Loads the Mimikatz PE with `PE.Load()` and executes the "dcsync" module to retrieve the NTLM hash of a specified (or all) Domain user. (Requires Domain Admin)
            </summary>
            <param name="user">Username to retrieve NTLM hash for. "All" for all domain users.</param>
            <param name="FQDN">Optionally specify an alternative fully qualified domain name. Default is current domain.</param>
            <param name="DC">Optionally specify a specific Domain Controller to target for the dcsync.</param>
            <returns>The NTLM hash of the target user(s).</returns>
        </member>
        <member name="M:SharpSploit.Credentials.Mimikatz.PassTheHash(System.String,System.String,System.String,System.String)">
            <summary>
            Loads the Mimikatz PE with `PE.Load()` and executes the "pth" module to start a new process
            as a user using an NTLM password hash for authentication.
            </summary>
            <param name="user">Username to authenticate as.</param>
            <param name="NTLM">NTLM hash to authenticate the user.</param>
            <param name="FQDN">Optionally specify an alternative fully qualified domain name. Default is current domain.</param>
            <param name="run">The command to execute as the specified user.</param>
            <returns></returns>
        </member>
        <member name="T:SharpSploit.Credentials.Tokens">
            <summary>
            Tokens is a library for token manipulation that can be used to impersonate other users, run commands as other user,
            and/or to bypass UAC using token duplication.
            </summary>
            <remarks>
            Tokens is adapted from and borrows heavily from Alexander Leary's (@0xbadjuju) Tokenvator (Found
            at https://github.com/0xbadjuju/Tokenvator).
            </remarks>
        </member>
        <member name="M:SharpSploit.Credentials.Tokens.#ctor">
            <summary>
            Creates the Tokens class, attempts to obtain the current process' token, and obtain the SeDebugPrivilege.
            </summary>
        </member>
        <member name="M:SharpSploit.Credentials.Tokens.Dispose">
            <summary>
            Attempts to close all open handles.
            </summary>
        </member>
        <member name="M:SharpSploit.Credentials.Tokens.WhoAmI">
            <summary>
            Gets the username of the currently used/impersonated token.
            </summary>
            <returns>Current username.</returns>
        </member>
        <member name="M:SharpSploit.Credentials.Tokens.ImpersonateUser(System.String)">
            <summary>
            Find a process owned by the specificied user and impersonate the token. Used to execute subsequent commands
            as the specified user. (Requires Admin)
            </summary>
            <param name="Username">User to impersonate. "DOMAIN\Username" format expected.</param>
            <returns>True if impersonation succeeds, false otherwise.</returns>
        </member>
        <member name="M:SharpSploit.Credentials.Tokens.ImpersonateProcess(System.UInt32)">
            <summary>
            Impersonate the token of the specified process. Used to execute subsequent commands as the user associated
            with the token of the specified process. (Requires Admin)
            </summary>
            <param name="ProcessID">Process ID of the process to impersonate.</param>
            <returns>True if impersonation succeeds, false otherwise.</returns>
        </member>
        <member name="M:SharpSploit.Credentials.Tokens.GetSystem">
            <summary>
            Impersonate the SYSTEM user. Equates to `ImpersonateUser("NT AUTHORITY\SYSTEM")`. (Requires Admin)
            </summary>
            <returns>True if impersonation succeeds, false otherwise.</returns>
        </member>
        <member name="M:SharpSploit.Credentials.Tokens.BypassUAC(System.String,System.String,System.String,System.Int32)">
            <summary>
            Bypasses UAC through token duplication and spawns a specified process. (Requires Admin)
            </summary>
            <param name="Binary">The binary to execute with high integrity.</param>
            <param name="Arguments">Arguments to pass to the binary.</param>
            <param name="Path">Path that the binary resides in.</param>
            <param name="ProcessId">Specify the process for which to perform token duplication. By deafult (0), all
            appropriate processes will be tried.</param>
            <returns>True if UAC bypass succeeeds, false otherwise.</returns>
            <remarks>
            Credit for the UAC bypass token duplication technique goes to James Forshaw (@tiraniddo).
            Credit for the PowerShell implementation of this bypass goes to Matt Nelson (@enigma0x3).
            </remarks>
        </member>
        <member name="M:SharpSploit.Credentials.Tokens.RunAs``1(System.String,System.String,System.String,System.Func{``0},SharpSploit.Execution.Win32.Advapi32.LOGON_TYPE)">
            <summary>
            Makes a new token to run a specified function as a specified user with a specified password. Automatically calls
            `RevertToSelf()` after executing the function.
            </summary>
            <typeparam name="T">Type of object to be return by the Action function.</typeparam>
            <param name="Username">Username to execute Action as.</param>
            <param name="Domain">Domain to authenticate the user to.</param>
            <param name="Password">Password to authenticate the user.</param>
            <param name="Action">Action to perform as the user</param>
            <param name="LogonType">LogonType to use. Defaults to LOGON32_LOGON_INTERACTIVE, which is suitable for local
            actions. LOGON32_LOGON_NEW_CREDENTIALS is suitable to perform actions which require remote authentication.</param>
            <returns>Object returned by the Action function.</returns>
            <remarks>
            Credit to https://github.com/mj1856/SimpleImpersonation for the awesome Func(T) idea.
            </remarks>
        </member>
        <member name="M:SharpSploit.Credentials.Tokens.MakeToken(System.String,System.String,System.String,SharpSploit.Execution.Win32.Advapi32.LOGON_TYPE)">
            <summary>
            Makes a new token with a specified username and password, and impersonates it to conduct future actions as
            the specified user.
            </summary>
            <param name="Username">Username to authenticate as.</param>
            <param name="Domain">Domain to authenticate the user to.</param>
            <param name="Password">Password to authenticate the user.</param>
            <param name="LogonType">LogonType to use. Defaults to LOGON32_LOGON_NEW_CREDENTIALS, which is suitable to
            perform actions which require remote authentication. LOGON32_LOGON_INTERACTIVE is suitable for local actions</param>
            <returns>True if impersonation succeeds, false otherwise.</returns>
            <remarks>
            Credit to @rsmudge for the technique detailed here: https://blog.cobaltstrike.com/2015/12/16/windows-access-tokens-and-alternate-credentials
            </remarks>
        </member>
        <member name="M:SharpSploit.Credentials.Tokens.RevertToSelf">
            <summary>
            Ends the impersonation of any token, reverting back to the initial token associated with the current process.
            Useful in conjuction with functions that impersonate a token and do not automatically RevertToSelf, such
            as: `ImpersonateUser()`, `ImpersonateProcess()`, `GetSystem()`, and `MakeToken()`.
            </summary>
            <returns>True if RevertToSelf succeeds, false otherwise.</returns>
        </member>
        <member name="M:SharpSploit.Credentials.Tokens.EnableTokenPrivilege(System.IntPtr@,System.String)">
            <summary>
            Enables a specified security privilege for a specified token. 
            </summary>
            <param name="hToken">Token to enable a security privilege for.</param>
            <param name="Privilege">Privilege to enable.</param>
            <returns>True if enabling Token succeeds, false otherwise.</returns>
        </member>
        <member name="T:SharpSploit.Enumeration.Domain">
            <summary>
            Domain is a library for domain enumeration that can be used to search for and query for information from
            DomainObjects such as users, groups, and computers.
            </summary>
            <remarks>
            Domain is adapted from Will Schroeder's (@harmj0y) PowerView (Found
            at https://github.com/PowerShellMafia/PowerSploit/blob/dev/Recon/PowerView.ps1)
            </remarks>
        </member>
        <member name="T:SharpSploit.Enumeration.Domain.DomainSearcher">
            <summary>
            DomainSearcher is a LDAP searcher class for domain enumeration.
            </summary>
            <remarks>
            DomainSearcher is adapted from Will Schroeder's (@harmj0y) PowerView. (Found
            at https://github.com/PowerShellMafia/PowerSploit/blob/dev/Recon/PowerView.ps1)
            </remarks>
        </member>
        <member name="M:SharpSploit.Enumeration.Domain.DomainSearcher.#ctor(SharpSploit.Enumeration.Domain.Credential,System.String,System.String,System.String,System.String,System.DirectoryServices.SearchScope,System.Int32,System.TimeSpan,System.Boolean,System.DirectoryServices.SecurityMasks)">
            <summary>
            Constructor for the DomainSearcher class.
            </summary>
            <param name="Credentials">Optional alternative Credentials to authenticate to the Domain.</param>
            <param name="Domain">Optional alternative Domain to authenticate to and search.</param>
            <param name="Server">Optional alternative Server within the Domain to authenticate to and search.</param>
            <param name="SearchBase">Optional SearchBase to prepend to all LDAP searches.</param>
            <param name="SearchString">Optional SearchString to append to SearchBase for all LDAP searches.</param>
            <param name="SearchScope">Optional SearchScope for the underlying DirectorySearcher object.</param>
            <param name="ResultPageSize">Optional ResultPageSize for the underlying DirectorySearcher object.</param>
            <param name="ServerTimeLimit">Optional max time limit for the server per search.</param>
            <param name="TombStone">Optionally retrieve deleted/tombstoned DomainObjects</param>
            <param name="SecurityMasks">Optional SecurityMasks for the underlying DirectorySearcher object.</param>
        </member>
        <member name="M:SharpSploit.Enumeration.Domain.DomainSearcher.GetDomainUser(System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{SharpSploit.Enumeration.Domain.UACEnum},System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Gets a specified user `DomainObject` in the current Domain.
            </summary>
            <param name="Identity">Username to search for.</param>
            <param name="LDAPFilter">Optional LDAP filter to apply to the search.</param>
            <param name="Properties">Optional list of properties to retrieve from the DomainObject.
            If not specified, all properties are included.</param>
            <param name="UACFilter">Optional filter to parse the userAccountControl DomainObject property.</param>
            <param name="SPN">Optionally filter for only a DomainObject with an SPN set.</param>
            <param name="AllowDelegation">Optionally filter for only a DomainObject that allows for delegation.</param>
            <param name="DisallowDelegation">Optionally filter for only a DomainObject that does not allow for delegation.</param>
            <param name="AdminCount">Optionally filter for only a DomainObject with the AdminCount property set.</param>
            <param name="TrustedToAuth">Optionally filter for only a DomainObject that is trusted to authenticate for other DomainObjects</param>
            <param name="PreauthNotRequired">Optionally filter for only a DomainObject does not require Kerberos preauthentication.</param>
            <returns>Matching user DomainObject</returns>
        </member>
        <member name="M:SharpSploit.Enumeration.Domain.DomainSearcher.GetDomainUsers(System.Collections.Generic.IEnumerable{System.String},System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{SharpSploit.Enumeration.Domain.UACEnum},System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Gets a list of specified (or all) user `DomainObject`s in the current Domain.
            </summary>
            <param name="Identities">Optional list of usernames to search for.</param>
            <param name="LDAPFilter">Optional LDAP filter to apply to the search.</param>
            <param name="Properties">Optional list of properties to retrieve from the DomainObject.
            If not specified, all properties are included.</param>
            <param name="UACFilter">Optional filter to parse the userAccountControl DomainObject property.</param>
            <param name="SPN">Optionally filter for only a DomainObject with an SPN set.</param>
            <param name="AllowDelegation">Optionally filter for only a DomainObject that allows for delegation.</param>
            <param name="DisallowDelegation">Optionally filter for only a DomainObject that does not allow for delegation.</param>
            <param name="AdminCount">Optionally filter for only a DomainObject with the AdminCount property set.</param>
            <param name="TrustedToAuth">Optionally filter for only a DomainObject that is trusted to authenticate for other DomainObjects</param>
            <param name="PreauthNotRequired">Optionally filter for only a DomainObject does not require Kerberos preauthentication.</param>
            <param name="FindOne">Optionally find only the first matching DomainObject.</param>
            <returns>List of matching user DomainObjects</returns>
        </member>
        <member name="M:SharpSploit.Enumeration.Domain.DomainSearcher.GetDomainGroup(System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.String,System.String)">
            <summary>
            Gets a specified group `DomainObject` in the current Domain.
            </summary>
            <param name="Identity">Group name to search for.</param>
            <param name="LDAPFilter">Optional LDAP filter to apply to the search.</param>
            <param name="Properties">Optional list of properties to retrieve from the DomainObject.
            If not specified, all properties are included.</param>
            <param name="AdminCount">Optionally filter for only a DomainObject with the AdminCount property set.</param>
            <param name="GroupScope">Optionally filter for a GroupScope (DomainLocal, Global, Universal, etc).</param>
            <param name="GroupProperty">Optionally filter for a GroupProperty (Security, Distribution, CreatedBySystem,
            NotCreatedBySystem,etc)</param>
            <returns>Matching group DomainObject</returns>
        </member>
        <member name="M:SharpSploit.Enumeration.Domain.DomainSearcher.GetDomainGroups(System.Collections.Generic.IEnumerable{System.String},System.String,System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.String,System.String,System.Boolean)">
            <summary>
            Gets a list of specified (or all) group `DomainObject`s in the current Domain.
            </summary>
            <param name="Identities">Optional list of group names to search for.</param>
            <param name="LDAPFilter">Optional LDAP filter to apply to the search.</param>
            <param name="Properties">Optional list of properties to retrieve from the DomainObject.
            If not specified, all properties are included.</param>
            <param name="AdminCount">Optionally filter for only a DomainObject with the AdminCount property set.</param>
            <param name="GroupScope">Optionally filter for a GroupScope (DomainLocal, Global, Universal, etc).</param>
            <param name="GroupProperty">Optionally filter for a GroupProperty (Security, Distribution, CreatedBySystem,
            NotCreatedBySystem,etc).</param>
            <param name="FindOne">Optionally find only the first matching DomainObject.</param>
            <returns>List of matching group DomainObjects</returns>
        </member>
        <member name="M:SharpSploit.Enumeration.Domain.DomainSearcher.GetDomainComputer(System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{SharpSploit.Enumeration.Domain.UACEnum},System.Boolean,System.Boolean,System.Boolean,System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Gets a specified computer `DomainObject` in the current Domain.
            </summary>
            <param name="Identity">ComputerName to search for</param>
            <param name="LDAPFilter">Optional LDAP filter to apply to the search.</param>
            <param name="Properties">Optional list of properties to retrieve from the DomainObject.
            If not specified, all properties are included.</param>
            <param name="UACFilter">Optional filter to parse the userAccountControl DomainObject property.</param>
            <param name="Unconstrained">Optionally filter for only a DomainObject that has unconstrained delegation.</param>
            <param name="TrustedToAuth">Optionally filter for only a DomainObject that is trusted to authenticate for other DomainObjects</param>
            <param name="Printers">Optionally return only a DomainObject that is a printer.</param>
            <param name="SPN">Optionally filter for only a DomainObject with an SPN set.</param>
            <param name="OperatingSystem">Optionally filter for only a DomainObject with a specific Operating System, wildcards accepted.</param>
            <param name="ServicePack">Optionally filter for only a DomainObject with a specific service pack, wildcards accepted.</param>
            <param name="SiteName">Optionally filter for only a DomainObject in a specific Domain SiteName, wildcards accepted.</param>
            <param name="Ping">Optional switch, ping the computer to ensure it's up before enumerating.</param>
            <returns>Matching computer DomainObject</returns>
        </member>
        <member name="M:SharpSploit.Enumeration.Domain.DomainSearcher.GetDomainComputers(System.Collections.Generic.IEnumerable{System.String},System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{SharpSploit.Enumeration.Domain.UACEnum},System.Boolean,System.Boolean,System.Boolean,System.String,System.String,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
             Gets a list of specified (or all) computer `DomainObject`s in the current Domain.
            </summary>
            <param name="Identities">Optional list of ComputerNames to search for.</param>
            <param name="LDAPFilter">Optional LDAP filter to apply to the search.</param>
            <param name="Properties">Optional list of properties to retrieve from the DomainObject.
            If not specified, all properties are included.</param>
            <param name="UACFilter">Optional filter to parse the userAccountControl DomainObject property.</param>
            <param name="Unconstrained">Optionally filter for only a DomainObject that has unconstrained delegation.</param>
            <param name="TrustedToAuth">Optionally filter for only a DomainObject that is trusted to authenticate for other DomainObjects</param>
            <param name="Printers">Optionally return only a DomainObject that is a printer.</param>
            <param name="SPN">Optionally filter for only a DomainObject with an SPN set.</param>
            <param name="OperatingSystem">Optionally filter for only a DomainObject with a specific Operating System, wildcards accepted.</param>
            <param name="ServicePack">Optionally filter for only a DomainObject with a specific service pack, wildcards accepted.</param>
            <param name="SiteName">Optionally filter for only a DomainObject in a specific Domain SiteName, wildcards accepted.</param>
            <param name="Ping">Optional switch, ping the computer to ensure it's up before enumerating.</param>
            <param name="FindOne">Optionally find only the first matching DomainObject.</param>
            <returns>List of matching computer DomainObjects</returns>
        </member>
        <member name="M:SharpSploit.Enumeration.Domain.DomainSearcher.GetDomainSPNTickets(System.Collections.Generic.IEnumerable{SharpSploit.Enumeration.Domain.DomainObject})">
            <summary>
            Gets `SPNTicket`s for specified `DomainObject`s.
            </summary>
            <param name="DomainObjects">List of DomainObjects with an SPN set.</param>
            <returns>List of SPNTickets for the specified DomainObjects</returns>
        </member>
        <member name="M:SharpSploit.Enumeration.Domain.DomainSearcher.GetDomainSPNTicket(SharpSploit.Enumeration.Domain.DomainObject)">
            <summary>
            Get `SPNTicket` for specified `DomainObject`.
            </summary>
            <param name="DomainObject">DomainObject with an SPN set.</param>
            <returns>SPNTicker for the specified DomainObject</returns>
        </member>
        <member name="M:SharpSploit.Enumeration.Domain.DomainSearcher.Kerberoast(System.Collections.Generic.IEnumerable{System.String},System.String,System.Collections.Generic.IEnumerable{SharpSploit.Enumeration.Domain.UACEnum},System.Boolean)">
            <summary>
            Gets a list of `SPNTicket`s for specified (or all) users with a SPN set in the current Domain.
            </summary>
            <param name="Identities">Username to Kerberoast of a user with an SPN set.</param>
            <param name="LDAPFilter">Optional LDAP filter when searching for users with an SPN set.</param>
            <param name="UACFilter">Optional filter to parse the userAccountControl DomainObject property.</param>
            <param name="FindOne">If true, will only find a single SPNTicket for the first user found with an SPN set.</param>
            <returns>List of SPNTickets</returns>
        </member>
        <member name="M:SharpSploit.Enumeration.Domain.DomainSearcher.Kerberoast(System.String,System.String,System.Collections.Generic.IEnumerable{SharpSploit.Enumeration.Domain.UACEnum})">
            <summary>
            Gets a list of `SPNTicket`s for specified (or all) users with a SPN set in the current Domain.
            </summary>
            <param name="Identity">Optional list of users to Kerberoast. If null, all users with an SPN set will be used.</param>
            <param name="LDAPFilter">Optional LDAP filter when searching for users with an SPN set.</param>
            <param name="UACFilter">Optional filter to parse the userAccountControl DomainObject property.</param>
            <returns>List of SPNTickets</returns>
        </member>
        <member name="T:SharpSploit.Enumeration.Domain.Credential">
            <summary>
            Credential to authenticate to the Domain with a DomainSearcher object.
            </summary>
        </member>
        <member name="T:SharpSploit.Enumeration.Domain.DomainObject">
            <summary>
            Generic DomainObject class for LDAP entries in Active Directory.
            </summary>
        </member>
        <member name="T:SharpSploit.Enumeration.Domain.SPNTicket">
            <summary>
            SPNTicket for a DomainObject with a SPN set. Useful for obtaining krb5tgs hashes.
            </summary>
        </member>
        <member name="M:SharpSploit.Enumeration.Domain.SPNTicket.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Constructor for SPNTicket.
            </summary>
            <param name="servicePrincipalName">Service Principal Name (SPN) for which the ticket applies.</param>
            <param name="samAccountName">SamAccountName for the user that has a SPN set.</param>
            <param name="userDomain">Domain name for the user that has a SPN set.</param>
            <param name="ticketHexStream">TicketHexStream of the SPNTicket.</param>
        </member>
        <member name="M:SharpSploit.Enumeration.Domain.SPNTicket.GetFormattedHash(SharpSploit.Enumeration.Domain.SPNTicket.HashFormat)">
            <summary>
            Gets a krb5tgs hash formatted for a cracker.
            </summary>
            <param name="format">Format for the hash.</param>
            <returns>Formatted krb5tgs hash.</returns>
        </member>
        <member name="T:SharpSploit.Enumeration.Net">
            <summary>
            Net is a library for localgroup/domain enumeration that can be used to search for users, groups, loggedonusers,
            and sessions on remote systems using Win32 API functions.
            </summary>
            <remarks>
            Net is adapted from Will Schroeder's (@harmj0y) PowerView. (Found
            at https://github.com/PowerShellMafia/PowerSploit/blob/dev/Recon/PowerView.ps1)
            </remarks>
        </member>
        <member name="T:SharpSploit.Enumeration.Net.LocalGroup">
            <summary>
            LocalGroup represents a local group object on a remote system.
            </summary>
        </member>
        <member name="T:SharpSploit.Enumeration.Net.LocalGroupMember">
            <summary>
            LocalGroupMember represents a user's membership to a local group on a remote system.
            </summary>
        </member>
        <member name="T:SharpSploit.Enumeration.Net.LoggedOnUser">
            <summary>
            LoggedOnUser represents a user logged on to a remote system.
            </summary>
        </member>
        <member name="T:SharpSploit.Enumeration.Net.SessionInfo">
            <summary>
            SessionInfo represents a user with a session on a remote system.
            </summary>
        </member>
        <member name="M:SharpSploit.Enumeration.Net.GetNetLocalGroups(SharpSploit.Enumeration.Domain.DomainObject,SharpSploit.Enumeration.Domain.Credential)">
            <summary>
            Gets a list of `LocalGroup`s from a specified DomainCompter.
            </summary>
            <param name="DomainComputer">DomainComputer to query for LocalGroups.</param>
            <param name="Credential">Credential to use for authentication to the DomainComputer.</param>
            <returns>List of LocalGroups.</returns>
        </member>
        <member name="M:SharpSploit.Enumeration.Net.GetNetLocalGroups(System.Collections.Generic.IEnumerable{SharpSploit.Enumeration.Domain.DomainObject},SharpSploit.Enumeration.Domain.Credential)">
            <summary>
            Gets a list of `LocalGroup`s from specified DomainComputers.
            </summary>
            <param name="DomainComputers">List of DomainComputers to query for LocalGroups.</param>
            <param name="Credential">Credential to use for authentication to the DomainComputer.</param>
            <returns>List of LocalGroups.</returns>
        </member>
        <member name="M:SharpSploit.Enumeration.Net.GetNetLocalGroups(System.String,SharpSploit.Enumeration.Domain.Credential)">
            <summary>
            Gets a list of `LocalGroup`s from specified remote computer(s).
            </summary>
            <param name="ComputerName">ComputerName to query for LocalGroups.</param>
            <param name="Credential">Credential to use for authentication to the ComputerName.</param>
            <returns>List of LocalGroups.</returns>
        </member>
        <member name="M:SharpSploit.Enumeration.Net.GetNetLocalGroups(System.Collections.Generic.IEnumerable{System.String},SharpSploit.Enumeration.Domain.Credential)">
            <summary>
            Gets a list of `LocalGroup`s from specified remote computer(s).
            </summary>
            <param name="ComputerNames">List of ComputerNames to query for LocalGroups.</param>
            <param name="Credential">Credential to use for authentication to the ComputerNames.</param>
            <returns>List of LocalGroups.</returns>
        </member>
        <member name="M:SharpSploit.Enumeration.Net.GetNetLocalGroupMembers(SharpSploit.Enumeration.Domain.DomainObject,System.String,SharpSploit.Enumeration.Domain.Credential)">
            <summary>
            Gets a list of `LocalGroupMember`s from a specified DomainComputer for a specified group.
            </summary>
            <param name="DomainComputer">DomainComputer to query for LocalGroupMembers.</param>
            <param name="GroupName">Group to search for LocalGroupMembers. Administrators, by default.</param>
            <param name="Credential">Credential to authenticate to the DomainComputer.</param>
            <returns>List of LocalGroupMembers</returns>
        </member>
        <member name="M:SharpSploit.Enumeration.Net.GetNetLocalGroupMembers(System.Collections.Generic.IEnumerable{SharpSploit.Enumeration.Domain.DomainObject},System.String,SharpSploit.Enumeration.Domain.Credential)">
            <summary>
            Gets a list of `LocalGroupMember`s from specified DomainComputers for a specified group.
            </summary>
            <param name="DomainComputers">DomainComputers to query for LocalGroupMembers.</param>
            <param name="GroupName">Group to search for LocalGroupMembers. Administrators, by default.</param>
            <param name="Credential">Credential to authenticate to the DomainComputer.</param>
            <returns>List of LocalGroupMembers.</returns>
        </member>
        <member name="M:SharpSploit.Enumeration.Net.GetNetLocalGroupMembers(System.String,System.String,SharpSploit.Enumeration.Domain.Credential)">
            <summary>
            Gets a list of `LocalGroupMember`s from a specified ComputerName for a specified group.
            </summary>
            <param name="ComputerName">ComputerName to query for LocalGroupMembers.</param>
            <param name="GroupName">Group to search for LocalGroupMembers. Administrators, by default.</param>
            <param name="Credential">Credential to authenticate to the ComputerName.</param>
            <returns>List of LocalGroupMembers.</returns>
        </member>
        <member name="M:SharpSploit.Enumeration.Net.GetNetLocalGroupMembers(System.Collections.Generic.IEnumerable{System.String},System.String,SharpSploit.Enumeration.Domain.Credential)">
            <summary>
            Gets a list of `LocalGroupMember`s from specified ComputerNames for a specified group.
            </summary>
            <param name="ComputerNames">List of ComputerNames to query for LocalGroupMembers.</param>
            <param name="GroupName">Group to search for LocalGroupMembers. Administrators, by default.</param>
            <param name="Credential">Credential to authenticate to the ComputerNames.</param>
            <returns>List of LocalGroupMembers</returns>
        </member>
        <member name="M:SharpSploit.Enumeration.Net.GetNetLoggedOnUsers(SharpSploit.Enumeration.Domain.DomainObject,SharpSploit.Enumeration.Domain.Credential)">
            <summary>
            Gets a list of `LoggedOnUser`s from a DomainComputer.
            </summary>
            <param name="DomainComputer">DomainComputer to query for LoggedOnUsers</param>
            <param name="Credential">Credentials to authenticate to the DomainComputer.</param>
            <returns>List of LoggedOnUsers.</returns>
        </member>
        <member name="M:SharpSploit.Enumeration.Net.GetNetLoggedOnUsers(System.Collections.Generic.IEnumerable{SharpSploit.Enumeration.Domain.DomainObject},SharpSploit.Enumeration.Domain.Credential)">
            <summary>
            Gets a list of `LoggedOnUser`s from a list of DomainComputers.
            </summary>
            <param name="DomainComputers">DomainComputers to query for LoggedOnUsers.</param>
            <param name="Credential">Credentials to authenticate to the DomainComputers.</param>
            <returns>List of LoggedOnUsers.</returns>
        </member>
        <member name="M:SharpSploit.Enumeration.Net.GetNetLoggedOnUsers(System.String,SharpSploit.Enumeration.Domain.Credential)">
            <summary>
            Gets a list of `LoggedOnUser`s from a ComputerName.
            </summary>
            <param name="ComputerName">ComputerName to query for LoggedOnUsers.</param>
            <param name="Credential">Credentials to authenticate to the ComputerName.</param>
            <returns>List of LoggedOnUsers.</returns>
        </member>
        <member name="M:SharpSploit.Enumeration.Net.GetNetLoggedOnUsers(System.Collections.Generic.IEnumerable{System.String},SharpSploit.Enumeration.Domain.Credential)">
            <summary>
            Gets a list of `LoggedOnUser`s from a list of ComputerNames.
            </summary>
            <param name="ComputerNames">ComputerNames to query for LoggedOnUsers.</param>
            <param name="Credential">Credentials to authenticate to the ComputerNames.</param>
            <returns>List of LoggedOnUsers.</returns>
        </member>
        <member name="M:SharpSploit.Enumeration.Net.GetNetSessions(SharpSploit.Enumeration.Domain.DomainObject,SharpSploit.Enumeration.Domain.Credential)">
            <summary>
            Gets a list of `SessionInfo`s from a DomainComputer.
            </summary>
            <param name="DomainComputer">DomainComputer to query for SessionInfos.</param>
            <param name="Credential">Credentials to authenticate to the DomainComputer.</param>
            <returns>List of SessionInfos.</returns>
        </member>
        <member name="M:SharpSploit.Enumeration.Net.GetNetSessions(System.Collections.Generic.IEnumerable{SharpSploit.Enumeration.Domain.DomainObject},SharpSploit.Enumeration.Domain.Credential)">
            <summary>
            Gets a list of `SessionInfo`s from a list of DomainComputers.
            </summary>
            <param name="DomainComputers">DomainComputers to query for SessionInfos.</param>
            <param name="Credential">Credentials to authenticate to the DomainComputers.</param>
            <returns>List of SessionInfos.</returns>
        </member>
        <member name="M:SharpSploit.Enumeration.Net.GetNetSessions(System.String,SharpSploit.Enumeration.Domain.Credential)">
            <summary>
            Gets a list of `SessionInfo`s from a ComputerName.
            </summary>
            <param name="ComputerName">ComputerName to query for SessionInfos.</param>
            <param name="Credential">Credentials to authenticate to the ComputerName.</param>
            <returns>List of SessionInfos.</returns>
        </member>
        <member name="M:SharpSploit.Enumeration.Net.GetNetSessions(System.Collections.Generic.IEnumerable{System.String},SharpSploit.Enumeration.Domain.Credential)">
            <summary>
            Gets a list of `SessionInfo`s from a list of ComputerNames.
            </summary>
            <param name="ComputerNames">ComputerNames to query for SessionInfos.</param>
            <param name="Credential">Credentials to authenticate to the ComputerNames.</param>
            <returns>List of SessionInfos.</returns>
        </member>
        <member name="T:SharpSploit.Enumeration.Host">
            <summary>
            Host is a library for local host enumeration.
            </summary>
        </member>
        <member name="M:SharpSploit.Enumeration.Host.GetProcessList">
            <summary>
            Gets a list of running processes on the system.
            </summary>
            <returns>List of ProcessResults.</returns>
        </member>
        <member name="M:SharpSploit.Enumeration.Host.CreateProcessDump(System.Int32,System.String,System.String)">
            <summary>
            Generates a minidump that represents the memory of a running process. Useful for offline Mimikatz
            if dumping the LSASS process. (Requires Admin)
            </summary>
            <param name="processId">Process ID of the process to generate a minidump for.</param>
            <param name="outputPath">Path to write output file in. Defaults to the current directory.</param>
            <param name="outputFileName">Filename to ouput the minidump to.</param>
            <remarks>
            Authored by Justin Bui (@youslydawg).
            </remarks>
        </member>
        <member name="M:SharpSploit.Enumeration.Host.CreateProcessDump(System.String,System.String,System.String)">
            <summary>
            Generates a minidump that represents the memory of a running process. Useful for offline Mimikatz
            if dumping the LSASS process. (Requires Admin)
            </summary>
            <param name="processName">Name of the process to generate a minidump for.</param>
            <param name="outputPath">Path to write output file in. Defaults to the current directory.</param>
            <param name="outputFileName">Filename to ouput the minidump to.</param>
            <remarks>
            Authored by Justin Bui (@youslydawg).
            </remarks>
        </member>
        <member name="M:SharpSploit.Enumeration.Host.CreateProcessDump(System.Diagnostics.Process,System.String,System.String)">
            <summary>
            Generates a minidump that represents the memory of a running process. Useful for offline Mimikatz
            if dumping the LSASS process. (Requires Admin)
            </summary>
            <param name="process">Process to generate a minidump for.</param>
            <param name="outputPath">Path to write output file in. Defaults to the current directory.</param>
            <param name="outputFileName">Filename to ouput the minidump to.</param>
            <remarks>
            Authored by Justin Bui (@youslydawg).
            </remarks>
        </member>
        <member name="M:SharpSploit.Enumeration.Host.GetHostname">
            <summary>
            Gets the hostname of the system.
            </summary>
            <returns>Hostname of the system.</returns>
        </member>
        <member name="M:SharpSploit.Enumeration.Host.GetUsername">
            <summary>
            Gets the Domain name and username of the current logged on user.
            </summary>
            <returns>Current username.</returns>
        </member>
        <member name="M:SharpSploit.Enumeration.Host.GetCurrentDirectory">
            <summary>
            Gets the full path of the current working directory.
            </summary>
            <returns>Current working directory.</returns>
        </member>
        <member name="M:SharpSploit.Enumeration.Host.GetDirectoryListing">
            <summary>
            Gets a directory listing of the current working directory.
            </summary>
            <returns>List of FileSystemEntryResults.</returns>
        </member>
        <member name="M:SharpSploit.Enumeration.Host.ChangeCurrentDirectory(System.String)">
            <summary>
            Changes the current directory by appending a specified string to the current working directory.
            </summary>
            <param name="AppendDirectory">String to append to the current directory.</param>
        </member>
        <member name="M:SharpSploit.Enumeration.Host.RegistryRead(System.String)">
            <summary>
            Reads a value stored in registry.
            </summary>
            <param name="RegPath">The full path to the registry value to be read.</param>
            <returns></returns>
        </member>
        <member name="M:SharpSploit.Enumeration.Host.RegistryRead(System.String,System.String)">
            <summary>
            Reads a value stored in registry.
            </summary>
            <param name="RegKey">The RegistryKey to read from.</param>
            <param name="RegValue">The name of name/value pair to read from in the RegistryKey.</param>
            <returns></returns>
        </member>
        <member name="M:SharpSploit.Enumeration.Host.RegistryWrite(System.String,System.Object)">
            <summary>
            Writes a value in the registry.
            </summary>
            <param name="RegPath">The full path to the registry value to be written to.</param>
            <param name="Value">The value to write to the registry key.</param>
            <returns></returns>
        </member>
        <member name="M:SharpSploit.Enumeration.Host.RegistryWrite(System.String,System.String,System.Object)">
            <summary>
            Writes a value in the registry.
            </summary>
            <param name="RegKey">The RegistryKey to read from.</param>
            <param name="RegValue">The name of name/value pair to read from in the RegistryKey.</param>
            <param name="Value">The value to write to the registry key.</param>
            <returns></returns>
        </member>
        <member name="T:SharpSploit.Enumeration.Host.ProcessResult">
            <summary>
            ProcessResult represents a running process, used with the GetProcessList() function.
            </summary>
        </member>
        <member name="T:SharpSploit.Enumeration.Host.FileSystemEntryResult">
            <summary>
            FileSystemEntryResult represents a file on disk, used with the GetDirectoryListing() function.
            </summary>
        </member>
        <member name="T:SharpSploit.Enumeration.Network">
            <summary>
            Network is a library for network enumeration such as identifying live systems and open ports.
            </summary>
        </member>
        <member name="M:SharpSploit.Enumeration.Network.PortScan(System.String,System.Int32,System.Boolean,System.Int32)">
            <summary>
            Conducts a port scan of a specified ComputerName and port and reports if the port is open.
            </summary>
            <param name="ComputerName">ComputerName to port scan.</param>
            <param name="Port">Port to scan.</param>
            <param name="Ping">Optional switch. If true, pings the ComputerName to ensure it's up before port scanning.</param>
            <param name="Timeout">Timeout (in milliseconds) before the port is considered down.</param>
            <returns>List of PortScanResults</returns>
        </member>
        <member name="M:SharpSploit.Enumeration.Network.PortScan(System.Collections.Generic.IList{System.String},System.Int32,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Conducts a port scan of specified ComputerNames on a specified port and reports if the port is open.
            </summary>
            <param name="ComputerNames">ComputerNames to port scan.</param>
            <param name="Port">Port to scan.</param>
            <param name="Ping">Optional switch. If true, pings the ComputerNames to ensure each is up before port scanning.</param>
            <param name="Timeout">Timeout (in milliseconds) before a port is considered down.</param>
            <param name="Threads">Number of threads with which to portscan simultaneously</param>
            <returns>List of PortScanResults</returns>
        </member>
        <member name="M:SharpSploit.Enumeration.Network.PortScan(System.String,System.Collections.Generic.IList{System.Int32},System.Boolean,System.Int32,System.Int32)">
            <summary>
            Conducts a port scan of a specified ComputerName on specified ports and reports open ports.
            </summary>
            <param name="ComputerName">ComputerName to port scan.</param>
            <param name="Ports">Ports to scan.</param>
            <param name="Ping">Optional switch. If true, pings the ComputerName to ensure it's up before port scanning.</param>
            <param name="Timeout">Timeout (in milliseconds) before a port is considered down.</param>
            <param name="Threads">Number of threads with which to portscan simultaneously</param>
            <returns>List of PortScanResults</returns>
        </member>
        <member name="M:SharpSploit.Enumeration.Network.PortScan(System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{System.Int32},System.Boolean,System.Int32,System.Int32)">
            <summary>
            Conducts a port scan of specified ComputerNames on specified ports and reports open ports.
            </summary>
            <param name="ComputerNames">ComputerNames to port scan.</param>
            <param name="Ports">Ports to scan.</param>
            <param name="Ping">Optional switch. If true, pings the ComputerNames to ensure each is up before port scanning.</param>
            <param name="Timeout">Timeout (in milliseconds) before a port is considered down.</param>
            <param name="Threads">Number of threads with which to portscan simultaneously</param>
            <returns>List of PortScanResults</returns>
        </member>
        <member name="M:SharpSploit.Enumeration.Network.Ping(System.String,System.Int32)">
            <summary>
            Pings a specified ComputerName to identify if it is live.
            </summary>
            <param name="ComputerName">ComputerName to ping.</param>
            <param name="Timeout">Timeout (in milliseconds) before a ComputerName is considered down.</param>
            <returns></returns>
        </member>
        <member name="M:SharpSploit.Enumeration.Network.Ping(System.Collections.Generic.IList{System.String},System.Int32,System.Int32)">
            <summary>
            Pings specified ComputerNames to identify live systems.
            </summary>
            <param name="ComputerNames">ComputerNames to ping.</param>
            <param name="Timeout">Timeout (in milliseconds) before a ComputerName is considered down.</param>
            <param name="Threads">Number of threads with which to ping simultaneously</param>
            <returns></returns>
        </member>
        <member name="T:SharpSploit.Enumeration.Network.PingResult">
            <summary>
            PingResult represent the result of a ping, used with the Ping() functions.
            </summary>
        </member>
        <member name="T:SharpSploit.Enumeration.Network.PortScanResult">
            <summary>
            PortScanResult represent the result of a port scan, used with the PortScan() functions.
            </summary>
        </member>
        <member name="T:SharpSploit.Execution.Assembly">
            <summary>
            Assembly is a library for loading .NET assemblies and executing methods contained within them.
            </summary>
        </member>
        <member name="M:SharpSploit.Execution.Assembly.AssemblyExecute(System.Byte[],System.String,System.String,System.Object[])">
            <summary>
            Loads a specified .NET assembly byte array and executes a specified method within a
            specified type with specified parameters.
            </summary>
            <param name="AssemblyBytes">The .NET assembly byte array.</param>
            <param name="TypeName">The name of the type that contains the method to execute.</param>
            <param name="MethodName">The name of the method to execute.</param>
            <param name="Parameters">The parameters to pass to the method.</param>
            <returns>GenericObjectResult of the method.</returns>
        </member>
        <member name="M:SharpSploit.Execution.Assembly.AssemblyExecute(System.String,System.String,System.String,System.Object[])">
            <summary>
            Loads a specified base64-encoded .NET assembly and executes a specified method within a
            specified type with specified parameters.
            </summary>
            <param name="EncodedAssembly">The base64-encoded .NET assembly byte array.</param>
            <param name="TypeName">The name of the type that contains the method to execute.</param>
            <param name="MethodName">The name of the method to execute.</param>
            <param name="Parameters">The parameters to pass to the method.</param>
            <returns>GenericObjectResult of the method.</returns>
        </member>
        <member name="M:SharpSploit.Execution.Assembly.Load(System.Byte[])">
            <summary>
            Loads a specified .NET assembly byte array.
            </summary>
            <param name="AssemblyBytes">The .NET assembly byte array.</param>
            <returns>Loaded assembly.</returns>
        </member>
        <member name="M:SharpSploit.Execution.Assembly.Load(System.String)">
            <summary>
            Loads a specified .NET assembly byte array.
            </summary>
            <param name="EncodedAssembly">The base64-encoded .NET assembly byte array.</param>
            <returns>Loaded assembly.</returns>
        </member>
        <member name="T:SharpSploit.Execution.PE">
            <summary>
            PE is a library for loading PEs in memory. It currently only work for the Mimikatz PE, not for arbitrary PEs.
            </summary>
            <remarks>
            PE has been adapted from Casey Smith's (@subtee) PELoader which is no longer available online. However, Chris Ross'
            (@xorrior) fork is available here: https://github.com/xorrior/Random-CSharpTools/tree/master/DllLoader/DllLoader
            </remarks>
        </member>
        <member name="P:SharpSploit.Execution.PE.OptionalHeader32">
            Gets the optional header
        </member>
        <member name="P:SharpSploit.Execution.PE.OptionalHeader64">
            Gets the optional header
        </member>
        <member name="F:SharpSploit.Execution.PE.dosHeader">
            The DOS header
        </member>
        <member name="M:SharpSploit.Execution.PE.#ctor(System.Byte[])">
            <summary>
            PE Constructor
            </summary>
            <param name="PEBytes">PE raw bytes.</param>
        </member>
        <member name="M:SharpSploit.Execution.PE.Load(System.Byte[])">
            <summary>
            Loads a PE with a specified byte array. (Requires Admin) **(*Currently broken. Works for Mimikatz, but not arbitrary PEs*)
            </summary>
            <param name="PEBytes"></param>
            <returns>PE</returns>
        </member>
        <member name="M:SharpSploit.Execution.PE.GetFunctionExport(System.String)">
            <summary>
            Gets a pointer to an exported function in the PE. Useful to call specific exported functions after loading the PE.
            </summary>
            <param name="funcName">Name of the function to get a pointer for.</param>
            <returns>Pointer to the function.</returns>
        </member>
        <member name="T:SharpSploit.Execution.Shell">
            <summary>
            Shell is a library for executing shell commands.
            </summary>
        </member>
        <member name="M:SharpSploit.Execution.Shell.PowerShellExecute(System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Executes specified PowerShell code using System.Management.Automation.dll and bypasses
            AMSI, ScriptBlock Logging, and Module Logging (but not Transcription Logging).
            </summary>
            <param name="PowerShellCode">PowerShell code to execute.</param>
            <param name="OutString">Switch. If true, appends Out-String to the PowerShellCode to execute.</param>
            <param name="BypassLogging">Switch. If true, bypasses ScriptBlock and Module logging.</param>
            <param name="BypassAmsi">Switch. If true, bypasses AMSI.</param>
            <returns>Output of executed PowerShell.</returns>
            <remarks>
            Credit for the AMSI bypass goes to Matt Graeber (@mattifestation). Credit for the ScriptBlock/Module
            logging bypass goes to Lee Christensen (@_tifkin).
            </remarks>
        </member>
        <member name="M:SharpSploit.Execution.Shell.ShellExecute(System.String,System.String,System.String,System.String)">
            <summary>
            Executes a specified Shell command, optionally with an alternative username and password.
            Equates to `ShellExecuteWithPath(ShellCommand, "C:\\WINDOWS\\System32")`.
            </summary>
            <param name="ShellCommand">The ShellCommand to execute, including any arguments.</param>
            <param name="Username">Optional alternative username to execute ShellCommand as.</param>
            <param name="Domain">Optional alternative Domain of the username to execute ShellCommand as.</param>
            <param name="Password">Optional password to authenticate the username to execute the ShellCommand as.</param>
            <returns>Ouput of the ShellCommand.</returns>
        </member>
        <member name="M:SharpSploit.Execution.Shell.ShellExecuteWithPath(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Executes a specified Shell command from a specified directory, optionally with an alternative username and password.
            </summary>
            <param name="ShellCommand">The ShellCommand to execute, including any arguments.</param>
            <param name="Path">The Path of the directory from which to execute the ShellCommand.</param>
            <param name="Username">Optional alternative username to execute ShellCommand as.</param>
            <param name="Domain">Optional alternative Domain of the username to execute ShellCommand as.</param>
            <param name="Password">Optional password to authenticate the username to execute the ShellCommand as.</param>
            <returns>Output of the ShellCommand.</returns>
        </member>
        <member name="T:SharpSploit.Execution.ShellCode">
            <summary>
            ShellCode includes a method for executing shellcode.
            </summary>
        </member>
        <member name="M:SharpSploit.Execution.ShellCode.ShellCodeExecute(System.Byte[])">
            <summary>
            Executes a specified ShellCode byte array by copying it to pinned memory, modifying the memory
            permissions with VirtualProtect(), and executing with a .NET delegate.
            </summary>
            <param name="ShellCode">ShellCode byte array to execute.</param>
            <returns>Boolean. True if execution succeeds, false otherwise.</returns>
        </member>
        <member name="T:SharpSploit.Execution.Win32">
            <summary>
            Win32 is a library of PInvoke signatures for Win32 API functions.
            </summary>
            <remarks>
            A majority of this library is adapted from signatures found at www.pinvoke.net.
            </remarks>
        </member>
        <member name="T:SharpSploit.Generic.GenericObjectResult">
            <summary>
            GenericObjectResult for listing objects whose type is unknown at compile time.
            </summary>
        </member>
        <member name="T:SharpSploit.Generic.SharpSploitResultList`1">
            <summary>
            SharpSploitResultList extends the IList interface for SharpSploitResults to easily
            format a list of results from various SharpSploit functions.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:SharpSploit.Generic.SharpSploitResultList`1.FormatList">
            <summary>
            Formats a SharpSploitResultList to a string similar to PowerShell's Format-List function.
            </summary>
            <returns>string</returns>
        </member>
        <member name="M:SharpSploit.Generic.SharpSploitResultList`1.ToString">
            <summary>
            Formats a SharpSploitResultList as a string. Overrides ToString() for convenience.
            </summary>
            <returns>string</returns>
        </member>
        <member name="T:SharpSploit.Generic.SharpSploitResult">
            <summary>
            Abstract class that represents a result from a SharpSploit function.
            </summary>
        </member>
        <member name="T:SharpSploit.Generic.SharpSploitResultProperty">
            <summary>
            SharpSploitResultProperty represents a property that is a member of a SharpSploitResult's ResultProperties.
            </summary>
        </member>
        <member name="T:SharpSploit.Misc.CountdownEvent">
            <summary>
            CountdownEvent is used for counting Asynchronous operations
            </summary>
            <remarks>
            Adapted from https://stackoverflow.com/questions/6790499
            </remarks>
        </member>
    </members>
</doc>
